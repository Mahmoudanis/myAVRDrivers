
MyAVRDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002c9a  00002d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800068  00800068  00002d36  2**0
                  ALLOC
  3 .stab         000027d8  00000000  00000000  00002d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119b  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000695b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000948f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a629  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adf7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 37       	cpi	r26, 0x72	; 114
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e9       	ldi	r30, 0x9A	; 154
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <main>
      8a:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:
#include "UART_private.h"

static void (*GS_UART_RXC_callback) (void);

void UART_vInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	UCSRC = 0b10000110;
	UBRRL = 51 ;/*9600*/
#endif
#if 1
	/*1- TRANSMITER ENABLE / RECIEVER ENABLE*/
	SET_BIT(UCSRB,TXEN);
     b50:	aa e2       	ldi	r26, 0x2A	; 42
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ea e2       	ldi	r30, 0x2A	; 42
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	88 60       	ori	r24, 0x08	; 8
     b5c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     b5e:	aa e2       	ldi	r26, 0x2A	; 42
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 61       	ori	r24, 0x10	; 16
     b6a:	8c 93       	st	X, r24
	/*2- INTERRUPT ENABLES*/

	/*2-a 	RX IE  */
	SET_BIT(UCSRB,RXCIE);
     b6c:	aa e2       	ldi	r26, 0x2A	; 42
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	ea e2       	ldi	r30, 0x2A	; 42
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	8c 93       	st	X, r24
	/*2-b   TX IE*/
	SET_BIT(UCSRB,TXCIE);
     b7a:	aa e2       	ldi	r26, 0x2A	; 42
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ea e2       	ldi	r30, 0x2A	; 42
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 64       	ori	r24, 0x40	; 64
     b86:	8c 93       	st	X, r24
	/*2-c   UDRE IE*/
	SET_BIT(UCSRB,UDRIE);
     b88:	aa e2       	ldi	r26, 0x2A	; 42
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	ea e2       	ldi	r30, 0x2A	; 42
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	80 62       	ori	r24, 0x20	; 32
     b94:	8c 93       	st	X, r24
	/*3- CHARACTER SIZE*/
	u8 ucsrc_setting = 0;/**************************************/
     b96:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(ucsrc_setting,7);
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ucsrc_setting,UCSZ0);
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ucsrc_setting,UCSZ1);
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	84 60       	ori	r24, 0x04	; 4
     ba8:	89 83       	std	Y+1, r24	; 0x01
	//UCSRC |= ucsrc_setting;

	CLR_BIT(UCSRB,UCSZ2);
     baa:	aa e2       	ldi	r26, 0x2A	; 42
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	ea e2       	ldi	r30, 0x2A	; 42
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8b 7f       	andi	r24, 0xFB	; 251
     bb6:	8c 93       	st	X, r24
	/*4- UART MODE SYNCH OR ASYNCH*/
	CLR_BIT(ucsrc_setting,UMSEL);
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	8f 7b       	andi	r24, 0xBF	; 191
     bbc:	89 83       	std	Y+1, r24	; 0x01
	//UCSRC |= ucsrc_setting;
	/*5- PARITY EVEN OR ODD*/
	CLR_BIT(ucsrc_setting,UPM0);
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	8f 7e       	andi	r24, 0xEF	; 239
     bc2:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(ucsrc_setting,UPM1);
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	8f 7d       	andi	r24, 0xDF	; 223
     bc8:	89 83       	std	Y+1, r24	; 0x01
	//UCSRC |= ucsrc_setting;
	/*6- 1 STOP OR 2*/
	CLR_BIT(ucsrc_setting,USBS);
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	87 7f       	andi	r24, 0xF7	; 247
     bce:	89 83       	std	Y+1, r24	; 0x01
	UCSRC = ucsrc_setting;
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	80 83       	st	Z, r24
#endif

}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <UART_vTransmitByte_synch>:
void UART_vTransmitByte_synch (u8 A_u8Byte)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */ //lma yb2a fady eb3t
	while ( !( UCSRA & (1<<UDRE)) );//estna l7d myb2a not be 1 fyb2a b 0
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	80 72       	andi	r24, 0x20	; 32
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	b9 f3       	breq	.-18     	; 0xbec <UART_vTransmitByte_synch+0xc>
	/* Put data into buffer, sends the data */
	UDR = A_u8Byte;
     bfe:	ec e2       	ldi	r30, 0x2C	; 44
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	80 83       	st	Z, r24


}
     c06:	0f 90       	pop	r0
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <UART_u8RecieveByte_synch>:
u8 UART_u8RecieveByte_synch (void)
{
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
     c16:	eb e2       	ldi	r30, 0x2B	; 43
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 23       	and	r24, r24
     c1e:	dc f7       	brge	.-10     	; 0xc16 <UART_u8RecieveByte_synch+0x8>
	/* Get and return received data from buffer */
	return UDR;
     c20:	ec e2       	ldi	r30, 0x2C	; 44
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z


}
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <UART_vSetBaudRate>:

void UART_vSetBaudRate (u32 A_u32Baud)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	00 d0       	rcall	.+0      	; 0xc32 <UART_vSetBaudRate+0x6>
     c32:	00 d0       	rcall	.+0      	; 0xc34 <UART_vSetBaudRate+0x8>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	69 83       	std	Y+1, r22	; 0x01
     c3a:	7a 83       	std	Y+2, r23	; 0x02
     c3c:	8b 83       	std	Y+3, r24	; 0x03
     c3e:	9c 83       	std	Y+4, r25	; 0x04
	UBRRL = A_u32Baud;
     c40:	e9 e2       	ldi	r30, 0x29	; 41
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	80 83       	st	Z, r24
}
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <UART_vPrintString>:

void UART_vPrintString(char str[])
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	00 d0       	rcall	.+0      	; 0xc5c <UART_vPrintString+0x6>
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	9a 83       	std	Y+2, r25	; 0x02
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	0a c0       	rjmp	.+20     	; 0xc7a <UART_vPrintString+0x24>
	while (*str != '\0')
	{
		UART_vTransmitByte_synch(*str);
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 81       	ld	r24, Z
     c6c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <UART_vTransmitByte_synch>
		str++ ;
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	9a 81       	ldd	r25, Y+2	; 0x02
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
	UBRRL = A_u32Baud;
}

void UART_vPrintString(char str[])
{
	while (*str != '\0')
     c7a:	e9 81       	ldd	r30, Y+1	; 0x01
     c7c:	fa 81       	ldd	r31, Y+2	; 0x02
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	89 f7       	brne	.-30     	; 0xc66 <UART_vPrintString+0x10>
	{
		UART_vTransmitByte_synch(*str);
		str++ ;
	}
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <UART_vReadString>:
void UART_vReadString(char str[],u32 A_u32size)
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	28 97       	sbiw	r28, 0x08	; 8
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	f8 94       	cli
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	9c 83       	std	Y+4, r25	; 0x04
     ca8:	8b 83       	std	Y+3, r24	; 0x03
     caa:	4d 83       	std	Y+5, r20	; 0x05
     cac:	5e 83       	std	Y+6, r21	; 0x06
     cae:	6f 83       	std	Y+7, r22	; 0x07
     cb0:	78 87       	std	Y+8, r23	; 0x08
	for(int i=0 ; i < A_u32size - 1 /*for null terminator*/; i++)
     cb2:	1a 82       	std	Y+2, r1	; 0x02
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	2d c0       	rjmp	.+90     	; 0xd12 <UART_vReadString+0x84>
	{
		str[i] = UART_u8RecieveByte_synch();
     cb8:	29 81       	ldd	r18, Y+1	; 0x01
     cba:	3a 81       	ldd	r19, Y+2	; 0x02
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	8c 01       	movw	r16, r24
     cc2:	02 0f       	add	r16, r18
     cc4:	13 1f       	adc	r17, r19
     cc6:	0e 94 07 06 	call	0xc0e	; 0xc0e <UART_u8RecieveByte_synch>
     cca:	f8 01       	movw	r30, r16
     ccc:	80 83       	st	Z, r24
		if(str[i] == '\n' || str[i] == '\r') // 34an run on linux and windows
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	3a 81       	ldd	r19, Y+2	; 0x02
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	8a 30       	cpi	r24, 0x0A	; 10
     ce0:	51 f0       	breq	.+20     	; 0xcf6 <UART_vReadString+0x68>
     ce2:	29 81       	ldd	r18, Y+1	; 0x01
     ce4:	3a 81       	ldd	r19, Y+2	; 0x02
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	9c 81       	ldd	r25, Y+4	; 0x04
     cea:	fc 01       	movw	r30, r24
     cec:	e2 0f       	add	r30, r18
     cee:	f3 1f       	adc	r31, r19
     cf0:	80 81       	ld	r24, Z
     cf2:	8d 30       	cpi	r24, 0x0D	; 13
     cf4:	49 f4       	brne	.+18     	; 0xd08 <UART_vReadString+0x7a>
		{
			str[i] = '\0';//overright on \n
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	2b 81       	ldd	r18, Y+3	; 0x03
     cfc:	3c 81       	ldd	r19, Y+4	; 0x04
     cfe:	f9 01       	movw	r30, r18
     d00:	e8 0f       	add	r30, r24
     d02:	f9 1f       	adc	r31, r25
     d04:	10 82       	st	Z, r1
     d06:	19 c0       	rjmp	.+50     	; 0xd3a <UART_vReadString+0xac>
		str++ ;
	}
}
void UART_vReadString(char str[],u32 A_u32size)
{
	for(int i=0 ; i < A_u32size - 1 /*for null terminator*/; i++)
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	9c 01       	movw	r18, r24
     d18:	44 27       	eor	r20, r20
     d1a:	37 fd       	sbrc	r19, 7
     d1c:	40 95       	com	r20
     d1e:	54 2f       	mov	r21, r20
     d20:	8d 81       	ldd	r24, Y+5	; 0x05
     d22:	9e 81       	ldd	r25, Y+6	; 0x06
     d24:	af 81       	ldd	r26, Y+7	; 0x07
     d26:	b8 85       	ldd	r27, Y+8	; 0x08
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	a1 09       	sbc	r26, r1
     d2c:	b1 09       	sbc	r27, r1
     d2e:	28 17       	cp	r18, r24
     d30:	39 07       	cpc	r19, r25
     d32:	4a 07       	cpc	r20, r26
     d34:	5b 07       	cpc	r21, r27
     d36:	08 f4       	brcc	.+2      	; 0xd3a <UART_vReadString+0xac>
     d38:	bf cf       	rjmp	.-130    	; 0xcb8 <UART_vReadString+0x2a>
		{
			str[i] = '\0';//overright on \n
			break;
		}
	}
}
     d3a:	28 96       	adiw	r28, 0x08	; 8
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <UART_u8GetUDRValue>:

u8 UART_u8GetUDRValue (void)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
	return UDR;
     d58:	ec e2       	ldi	r30, 0x2C	; 44
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
}
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <UART_vSetCallback>:

void UART_vSetCallback (void (*fptr)(void))
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	00 d0       	rcall	.+0      	; 0xd6a <UART_vSetCallback+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
	GS_UART_RXC_callback = fptr;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	90 93 69 00 	sts	0x0069, r25
     d7a:	80 93 68 00 	sts	0x0068, r24
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <__vector_13>:

void __vector_13 (void) __attribute__((signal)); //attribute order of elcompiler 34an tdif option llfunction (cancel optimization t2fl el global 2bl mtd5ol 34an tmn3 el nesting
void __vector_13 (void)
{
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	if(GS_UART_RXC_callback!=NULL)
     db2:	80 91 68 00 	lds	r24, 0x0068
     db6:	90 91 69 00 	lds	r25, 0x0069
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <__vector_13+0x40>
	{
		GS_UART_RXC_callback();
     dbe:	e0 91 68 00 	lds	r30, 0x0068
     dc2:	f0 91 69 00 	lds	r31, 0x0069
     dc6:	09 95       	icall
	}
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	4f 91       	pop	r20
     de0:	3f 91       	pop	r19
     de2:	2f 91       	pop	r18
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <LCD_vidSendChar>:
#include "LCD_config.h"
#include "avr/io.h"
#include "avr/delay.h"

void LCD_vidSendChar(char character)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	6d 97       	sbiw	r28, 0x1d	; 29
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select RS -> 1*/
	SET_BIT(LCD_CTRL_PORT,PIN0);
     e04:	ab e3       	ldi	r26, 0x3B	; 59
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	eb e3       	ldi	r30, 0x3B	; 59
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	81 60       	ori	r24, 0x01	; 1
     e10:	8c 93       	st	X, r24
	/*select RW -> 0*/
	CLR_BIT(LCD_CTRL_PORT,PIN1);
     e12:	ab e3       	ldi	r26, 0x3B	; 59
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	eb e3       	ldi	r30, 0x3B	; 59
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	8d 7f       	andi	r24, 0xFD	; 253
     e1e:	8c 93       	st	X, r24
	/*put data on LCD pins*/
	PORTB=character;
     e20:	e8 e3       	ldi	r30, 0x38	; 56
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e26:	80 83       	st	Z, r24

	/*pulse on enable*/
	SET_BIT(LCD_CTRL_PORT,PIN2);
     e28:	ab e3       	ldi	r26, 0x3B	; 59
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	eb e3       	ldi	r30, 0x3B	; 59
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8c 93       	st	X, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e8       	ldi	r26, 0x80	; 128
     e3c:	bf e3       	ldi	r27, 0x3F	; 63
     e3e:	89 8f       	std	Y+25, r24	; 0x19
     e40:	9a 8f       	std	Y+26, r25	; 0x1a
     e42:	ab 8f       	std	Y+27, r26	; 0x1b
     e44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	69 8d       	ldd	r22, Y+25	; 0x19
     e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8d 8b       	std	Y+21, r24	; 0x15
     e60:	9e 8b       	std	Y+22, r25	; 0x16
     e62:	af 8b       	std	Y+23, r26	; 0x17
     e64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e66:	6d 89       	ldd	r22, Y+21	; 0x15
     e68:	7e 89       	ldd	r23, Y+22	; 0x16
     e6a:	8f 89       	ldd	r24, Y+23	; 0x17
     e6c:	98 8d       	ldd	r25, Y+24	; 0x18
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <LCD_vidSendChar+0x9a>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 8b       	std	Y+20, r25	; 0x14
     e84:	8b 8b       	std	Y+19, r24	; 0x13
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <LCD_vidSendChar+0x118>
	else if (__tmp > 65535)
     e88:	6d 89       	ldd	r22, Y+21	; 0x15
     e8a:	7e 89       	ldd	r23, Y+22	; 0x16
     e8c:	8f 89       	ldd	r24, Y+23	; 0x17
     e8e:	98 8d       	ldd	r25, Y+24	; 0x18
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <LCD_vidSendChar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	69 8d       	ldd	r22, Y+25	; 0x19
     ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9c 8b       	std	Y+20, r25	; 0x14
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <LCD_vidSendChar+0xfa>
     eca:	88 ec       	ldi	r24, 0xC8	; 200
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9a 8b       	std	Y+18, r25	; 0x12
     ed0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed2:	89 89       	ldd	r24, Y+17	; 0x11
     ed4:	9a 89       	ldd	r25, Y+18	; 0x12
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <LCD_vidSendChar+0xe8>
     eda:	9a 8b       	std	Y+18, r25	; 0x12
     edc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	8b 89       	ldd	r24, Y+19	; 0x13
     ee0:	9c 89       	ldd	r25, Y+20	; 0x14
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9c 8b       	std	Y+20, r25	; 0x14
     ee6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	8b 89       	ldd	r24, Y+19	; 0x13
     eea:	9c 89       	ldd	r25, Y+20	; 0x14
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <LCD_vidSendChar+0xdc>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <LCD_vidSendChar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6d 89       	ldd	r22, Y+21	; 0x15
     ef4:	7e 89       	ldd	r23, Y+22	; 0x16
     ef6:	8f 89       	ldd	r24, Y+23	; 0x17
     ef8:	98 8d       	ldd	r25, Y+24	; 0x18
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9c 8b       	std	Y+20, r25	; 0x14
     f04:	8b 8b       	std	Y+19, r24	; 0x13
     f06:	8b 89       	ldd	r24, Y+19	; 0x13
     f08:	9c 89       	ldd	r25, Y+20	; 0x14
     f0a:	98 8b       	std	Y+16, r25	; 0x10
     f0c:	8f 87       	std	Y+15, r24	; 0x0f
     f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f10:	98 89       	ldd	r25, Y+16	; 0x10
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <LCD_vidSendChar+0x124>
     f16:	98 8b       	std	Y+16, r25	; 0x10
     f18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLR_BIT(LCD_CTRL_PORT,PIN2);
     f1a:	ab e3       	ldi	r26, 0x3B	; 59
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	eb e3       	ldi	r30, 0x3B	; 59
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8b 7f       	andi	r24, 0xFB	; 251
     f26:	8c 93       	st	X, r24
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e8       	ldi	r26, 0x80	; 128
     f2e:	bf e3       	ldi	r27, 0x3F	; 63
     f30:	8b 87       	std	Y+11, r24	; 0x0b
     f32:	9c 87       	std	Y+12, r25	; 0x0c
     f34:	ad 87       	std	Y+13, r26	; 0x0d
     f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	a9 87       	std	Y+9, r26	; 0x09
     f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f58:	6f 81       	ldd	r22, Y+7	; 0x07
     f5a:	78 85       	ldd	r23, Y+8	; 0x08
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <LCD_vidSendChar+0x18c>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <LCD_vidSendChar+0x20a>
	else if (__tmp > 65535)
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <LCD_vidSendChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6b 85       	ldd	r22, Y+11	; 0x0b
     f94:	7c 85       	ldd	r23, Y+12	; 0x0c
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	0f c0       	rjmp	.+30     	; 0xfda <LCD_vidSendChar+0x1ec>
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LCD_vidSendChar+0x1da>
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <LCD_vidSendChar+0x1ce>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <LCD_vidSendChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <LCD_vidSendChar+0x216>
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    100c:	6d 96       	adiw	r28, 0x1d	; 29
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <LCD_vidSendCommand>:
void LCD_vidSendCommand(u8 command)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	6d 97       	sbiw	r28, 0x1d	; 29
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select RS -> 1*/
	CLR_BIT(LCD_CTRL_PORT,PIN0);
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8e 7f       	andi	r24, 0xFE	; 254
    1040:	8c 93       	st	X, r24
	/*select RW -> 0*/
	CLR_BIT(LCD_CTRL_PORT,PIN1);
    1042:	ab e3       	ldi	r26, 0x3B	; 59
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	eb e3       	ldi	r30, 0x3B	; 59
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8d 7f       	andi	r24, 0xFD	; 253
    104e:	8c 93       	st	X, r24
	/*put data on LCD pins*/
	PORTB=command;
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1056:	80 83       	st	Z, r24

	/*pulse on enable*/
	SET_BIT(LCD_CTRL_PORT,PIN2);
    1058:	ab e3       	ldi	r26, 0x3B	; 59
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	eb e3       	ldi	r30, 0x3B	; 59
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	8c 93       	st	X, r24
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	a0 e8       	ldi	r26, 0x80	; 128
    106c:	bf e3       	ldi	r27, 0x3F	; 63
    106e:	89 8f       	std	Y+25, r24	; 0x19
    1070:	9a 8f       	std	Y+26, r25	; 0x1a
    1072:	ab 8f       	std	Y+27, r26	; 0x1b
    1074:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1076:	69 8d       	ldd	r22, Y+25	; 0x19
    1078:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	4a ef       	ldi	r20, 0xFA	; 250
    1084:	54 e4       	ldi	r21, 0x44	; 68
    1086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	8d 8b       	std	Y+21, r24	; 0x15
    1090:	9e 8b       	std	Y+22, r25	; 0x16
    1092:	af 8b       	std	Y+23, r26	; 0x17
    1094:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1096:	6d 89       	ldd	r22, Y+21	; 0x15
    1098:	7e 89       	ldd	r23, Y+22	; 0x16
    109a:	8f 89       	ldd	r24, Y+23	; 0x17
    109c:	98 8d       	ldd	r25, Y+24	; 0x18
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <LCD_vidSendCommand+0x9a>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9c 8b       	std	Y+20, r25	; 0x14
    10b4:	8b 8b       	std	Y+19, r24	; 0x13
    10b6:	3f c0       	rjmp	.+126    	; 0x1136 <LCD_vidSendCommand+0x118>
	else if (__tmp > 65535)
    10b8:	6d 89       	ldd	r22, Y+21	; 0x15
    10ba:	7e 89       	ldd	r23, Y+22	; 0x16
    10bc:	8f 89       	ldd	r24, Y+23	; 0x17
    10be:	98 8d       	ldd	r25, Y+24	; 0x18
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	3f ef       	ldi	r19, 0xFF	; 255
    10c4:	4f e7       	ldi	r20, 0x7F	; 127
    10c6:	57 e4       	ldi	r21, 0x47	; 71
    10c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10cc:	18 16       	cp	r1, r24
    10ce:	4c f5       	brge	.+82     	; 0x1122 <LCD_vidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d0:	69 8d       	ldd	r22, Y+25	; 0x19
    10d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e2       	ldi	r20, 0x20	; 32
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9c 8b       	std	Y+20, r25	; 0x14
    10f6:	8b 8b       	std	Y+19, r24	; 0x13
    10f8:	0f c0       	rjmp	.+30     	; 0x1118 <LCD_vidSendCommand+0xfa>
    10fa:	88 ec       	ldi	r24, 0xC8	; 200
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	9a 8b       	std	Y+18, r25	; 0x12
    1100:	89 8b       	std	Y+17, r24	; 0x11
    1102:	89 89       	ldd	r24, Y+17	; 0x11
    1104:	9a 89       	ldd	r25, Y+18	; 0x12
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <LCD_vidSendCommand+0xe8>
    110a:	9a 8b       	std	Y+18, r25	; 0x12
    110c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9c 8b       	std	Y+20, r25	; 0x14
    1116:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1118:	8b 89       	ldd	r24, Y+19	; 0x13
    111a:	9c 89       	ldd	r25, Y+20	; 0x14
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	69 f7       	brne	.-38     	; 0x10fa <LCD_vidSendCommand+0xdc>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <LCD_vidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1122:	6d 89       	ldd	r22, Y+21	; 0x15
    1124:	7e 89       	ldd	r23, Y+22	; 0x16
    1126:	8f 89       	ldd	r24, Y+23	; 0x17
    1128:	98 8d       	ldd	r25, Y+24	; 0x18
    112a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	9c 8b       	std	Y+20, r25	; 0x14
    1134:	8b 8b       	std	Y+19, r24	; 0x13
    1136:	8b 89       	ldd	r24, Y+19	; 0x13
    1138:	9c 89       	ldd	r25, Y+20	; 0x14
    113a:	98 8b       	std	Y+16, r25	; 0x10
    113c:	8f 87       	std	Y+15, r24	; 0x0f
    113e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1140:	98 89       	ldd	r25, Y+16	; 0x10
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <LCD_vidSendCommand+0x124>
    1146:	98 8b       	std	Y+16, r25	; 0x10
    1148:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLR_BIT(LCD_CTRL_PORT,PIN2);
    114a:	ab e3       	ldi	r26, 0x3B	; 59
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	eb e3       	ldi	r30, 0x3B	; 59
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8b 7f       	andi	r24, 0xFB	; 251
    1156:	8c 93       	st	X, r24
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e8       	ldi	r26, 0x80	; 128
    115e:	bf e3       	ldi	r27, 0x3F	; 63
    1160:	8b 87       	std	Y+11, r24	; 0x0b
    1162:	9c 87       	std	Y+12, r25	; 0x0c
    1164:	ad 87       	std	Y+13, r26	; 0x0d
    1166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1168:	6b 85       	ldd	r22, Y+11	; 0x0b
    116a:	7c 85       	ldd	r23, Y+12	; 0x0c
    116c:	8d 85       	ldd	r24, Y+13	; 0x0d
    116e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	4a ef       	ldi	r20, 0xFA	; 250
    1176:	54 e4       	ldi	r21, 0x44	; 68
    1178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	8f 83       	std	Y+7, r24	; 0x07
    1182:	98 87       	std	Y+8, r25	; 0x08
    1184:	a9 87       	std	Y+9, r26	; 0x09
    1186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1188:	6f 81       	ldd	r22, Y+7	; 0x07
    118a:	78 85       	ldd	r23, Y+8	; 0x08
    118c:	89 85       	ldd	r24, Y+9	; 0x09
    118e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119c:	88 23       	and	r24, r24
    119e:	2c f4       	brge	.+10     	; 0x11aa <LCD_vidSendCommand+0x18c>
		__ticks = 1;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	3f c0       	rjmp	.+126    	; 0x1228 <LCD_vidSendCommand+0x20a>
	else if (__tmp > 65535)
    11aa:	6f 81       	ldd	r22, Y+7	; 0x07
    11ac:	78 85       	ldd	r23, Y+8	; 0x08
    11ae:	89 85       	ldd	r24, Y+9	; 0x09
    11b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	3f ef       	ldi	r19, 0xFF	; 255
    11b6:	4f e7       	ldi	r20, 0x7F	; 127
    11b8:	57 e4       	ldi	r21, 0x47	; 71
    11ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11be:	18 16       	cp	r1, r24
    11c0:	4c f5       	brge	.+82     	; 0x1214 <LCD_vidSendCommand+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e2       	ldi	r20, 0x20	; 32
    11d0:	51 e4       	ldi	r21, 0x41	; 65
    11d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	cd 01       	movw	r24, r26
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	0f c0       	rjmp	.+30     	; 0x120a <LCD_vidSendCommand+0x1ec>
    11ec:	88 ec       	ldi	r24, 0xC8	; 200
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9c 83       	std	Y+4, r25	; 0x04
    11f2:	8b 83       	std	Y+3, r24	; 0x03
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_vidSendCommand+0x1da>
    11fc:	9c 83       	std	Y+4, r25	; 0x04
    11fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1200:	8d 81       	ldd	r24, Y+5	; 0x05
    1202:	9e 81       	ldd	r25, Y+6	; 0x06
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9e 83       	std	Y+6, r25	; 0x06
    1208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	69 f7       	brne	.-38     	; 0x11ec <LCD_vidSendCommand+0x1ce>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <LCD_vidSendCommand+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1214:	6f 81       	ldd	r22, Y+7	; 0x07
    1216:	78 85       	ldd	r23, Y+8	; 0x08
    1218:	89 85       	ldd	r24, Y+9	; 0x09
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <LCD_vidSendCommand+0x216>
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    123c:	6d 96       	adiw	r28, 0x1d	; 29
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <LCD_vidInit>:

void LCD_vidInit (void)
{
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	c6 54       	subi	r28, 0x46	; 70
    125c:	d0 40       	sbci	r29, 0x00	; 0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	f8 94       	cli
    1262:	de bf       	out	0x3e, r29	; 62
    1264:	0f be       	out	0x3f, r0	; 63
    1266:	cd bf       	out	0x3d, r28	; 61
	/* pins direction */
	LCD_DATA_DDR = 0xff;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	80 83       	st	Z, r24

	SET_BIT(LCD_CTRL_DDR,PIN0);
    1270:	aa e3       	ldi	r26, 0x3A	; 58
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_DDR,PIN1);
    127e:	aa e3       	ldi	r26, 0x3A	; 58
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	82 60       	ori	r24, 0x02	; 2
    128a:	8c 93       	st	X, r24
	SET_BIT(LCD_CTRL_DDR,PIN2);
    128c:	aa e3       	ldi	r26, 0x3A	; 58
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ea e3       	ldi	r30, 0x3A	; 58
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	84 60       	ori	r24, 0x04	; 4
    1298:	8c 93       	st	X, r24
    129a:	fe 01       	movw	r30, r28
    129c:	ed 5b       	subi	r30, 0xBD	; 189
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a8 e4       	ldi	r26, 0x48	; 72
    12a6:	b2 e4       	ldi	r27, 0x42	; 66
    12a8:	80 83       	st	Z, r24
    12aa:	91 83       	std	Z+1, r25	; 0x01
    12ac:	a2 83       	std	Z+2, r26	; 0x02
    12ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12b0:	8e 01       	movw	r16, r28
    12b2:	01 5c       	subi	r16, 0xC1	; 193
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	fe 01       	movw	r30, r28
    12b8:	ed 5b       	subi	r30, 0xBD	; 189
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 83       	st	Z, r24
    12d8:	91 83       	std	Z+1, r25	; 0x01
    12da:	a2 83       	std	Z+2, r26	; 0x02
    12dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12de:	fe 01       	movw	r30, r28
    12e0:	ff 96       	adiw	r30, 0x3f	; 63
    12e2:	60 81       	ld	r22, Z
    12e4:	71 81       	ldd	r23, Z+1	; 0x01
    12e6:	82 81       	ldd	r24, Z+2	; 0x02
    12e8:	93 81       	ldd	r25, Z+3	; 0x03
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	40 e8       	ldi	r20, 0x80	; 128
    12f0:	5f e3       	ldi	r21, 0x3F	; 63
    12f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f6:	88 23       	and	r24, r24
    12f8:	2c f4       	brge	.+10     	; 0x1304 <LCD_vidInit+0xb6>
		__ticks = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9e af       	std	Y+62, r25	; 0x3e
    1300:	8d af       	std	Y+61, r24	; 0x3d
    1302:	46 c0       	rjmp	.+140    	; 0x1390 <LCD_vidInit+0x142>
	else if (__tmp > 65535)
    1304:	fe 01       	movw	r30, r28
    1306:	ff 96       	adiw	r30, 0x3f	; 63
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	64 f5       	brge	.+88     	; 0x1378 <LCD_vidInit+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	fe 01       	movw	r30, r28
    1322:	ed 5b       	subi	r30, 0xBD	; 189
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	51 e4       	ldi	r21, 0x41	; 65
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9e af       	std	Y+62, r25	; 0x3e
    134c:	8d af       	std	Y+61, r24	; 0x3d
    134e:	0f c0       	rjmp	.+30     	; 0x136e <LCD_vidInit+0x120>
    1350:	88 ec       	ldi	r24, 0xC8	; 200
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9c af       	std	Y+60, r25	; 0x3c
    1356:	8b af       	std	Y+59, r24	; 0x3b
    1358:	8b ad       	ldd	r24, Y+59	; 0x3b
    135a:	9c ad       	ldd	r25, Y+60	; 0x3c
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <LCD_vidInit+0x10e>
    1360:	9c af       	std	Y+60, r25	; 0x3c
    1362:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	8d ad       	ldd	r24, Y+61	; 0x3d
    1366:	9e ad       	ldd	r25, Y+62	; 0x3e
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	9e af       	std	Y+62, r25	; 0x3e
    136c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    136e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1370:	9e ad       	ldd	r25, Y+62	; 0x3e
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	69 f7       	brne	.-38     	; 0x1350 <LCD_vidInit+0x102>
    1376:	16 c0       	rjmp	.+44     	; 0x13a4 <LCD_vidInit+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1378:	fe 01       	movw	r30, r28
    137a:	ff 96       	adiw	r30, 0x3f	; 63
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9e af       	std	Y+62, r25	; 0x3e
    138e:	8d af       	std	Y+61, r24	; 0x3d
    1390:	8d ad       	ldd	r24, Y+61	; 0x3d
    1392:	9e ad       	ldd	r25, Y+62	; 0x3e
    1394:	9a af       	std	Y+58, r25	; 0x3a
    1396:	89 af       	std	Y+57, r24	; 0x39
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	9a ad       	ldd	r25, Y+58	; 0x3a
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <LCD_vidInit+0x14e>
    13a0:	9a af       	std	Y+58, r25	; 0x3a
    13a2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(50);

	LCD_vidSendCommand(0b00111000);
    13a4:	88 e3       	ldi	r24, 0x38	; 56
    13a6:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e8       	ldi	r26, 0x80	; 128
    13b0:	bf e3       	ldi	r27, 0x3F	; 63
    13b2:	8d ab       	std	Y+53, r24	; 0x35
    13b4:	9e ab       	std	Y+54, r25	; 0x36
    13b6:	af ab       	std	Y+55, r26	; 0x37
    13b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6d a9       	ldd	r22, Y+53	; 0x35
    13bc:	7e a9       	ldd	r23, Y+54	; 0x36
    13be:	8f a9       	ldd	r24, Y+55	; 0x37
    13c0:	98 ad       	ldd	r25, Y+56	; 0x38
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	89 ab       	std	Y+49, r24	; 0x31
    13d4:	9a ab       	std	Y+50, r25	; 0x32
    13d6:	ab ab       	std	Y+51, r26	; 0x33
    13d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13da:	69 a9       	ldd	r22, Y+49	; 0x31
    13dc:	7a a9       	ldd	r23, Y+50	; 0x32
    13de:	8b a9       	ldd	r24, Y+51	; 0x33
    13e0:	9c a9       	ldd	r25, Y+52	; 0x34
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <LCD_vidInit+0x1ae>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	98 ab       	std	Y+48, r25	; 0x30
    13f8:	8f a7       	std	Y+47, r24	; 0x2f
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <LCD_vidInit+0x22c>
	else if (__tmp > 65535)
    13fc:	69 a9       	ldd	r22, Y+49	; 0x31
    13fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1400:	8b a9       	ldd	r24, Y+51	; 0x33
    1402:	9c a9       	ldd	r25, Y+52	; 0x34
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <LCD_vidInit+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6d a9       	ldd	r22, Y+53	; 0x35
    1416:	7e a9       	ldd	r23, Y+54	; 0x36
    1418:	8f a9       	ldd	r24, Y+55	; 0x37
    141a:	98 ad       	ldd	r25, Y+56	; 0x38
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	98 ab       	std	Y+48, r25	; 0x30
    143a:	8f a7       	std	Y+47, r24	; 0x2f
    143c:	0f c0       	rjmp	.+30     	; 0x145c <LCD_vidInit+0x20e>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9e a7       	std	Y+46, r25	; 0x2e
    1444:	8d a7       	std	Y+45, r24	; 0x2d
    1446:	8d a5       	ldd	r24, Y+45	; 0x2d
    1448:	9e a5       	ldd	r25, Y+46	; 0x2e
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <LCD_vidInit+0x1fc>
    144e:	9e a7       	std	Y+46, r25	; 0x2e
    1450:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8f a5       	ldd	r24, Y+47	; 0x2f
    1454:	98 a9       	ldd	r25, Y+48	; 0x30
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	98 ab       	std	Y+48, r25	; 0x30
    145a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8f a5       	ldd	r24, Y+47	; 0x2f
    145e:	98 a9       	ldd	r25, Y+48	; 0x30
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <LCD_vidInit+0x1f0>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <LCD_vidInit+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	69 a9       	ldd	r22, Y+49	; 0x31
    1468:	7a a9       	ldd	r23, Y+50	; 0x32
    146a:	8b a9       	ldd	r24, Y+51	; 0x33
    146c:	9c a9       	ldd	r25, Y+52	; 0x34
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	98 ab       	std	Y+48, r25	; 0x30
    1478:	8f a7       	std	Y+47, r24	; 0x2f
    147a:	8f a5       	ldd	r24, Y+47	; 0x2f
    147c:	98 a9       	ldd	r25, Y+48	; 0x30
    147e:	9c a7       	std	Y+44, r25	; 0x2c
    1480:	8b a7       	std	Y+43, r24	; 0x2b
    1482:	8b a5       	ldd	r24, Y+43	; 0x2b
    1484:	9c a5       	ldd	r25, Y+44	; 0x2c
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <LCD_vidInit+0x238>
    148a:	9c a7       	std	Y+44, r25	; 0x2c
    148c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_vidSendCommand(0b00001100);
    148e:	8c e0       	ldi	r24, 0x0C	; 12
    1490:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e8       	ldi	r26, 0x80	; 128
    149a:	bf e3       	ldi	r27, 0x3F	; 63
    149c:	8f a3       	std	Y+39, r24	; 0x27
    149e:	98 a7       	std	Y+40, r25	; 0x28
    14a0:	a9 a7       	std	Y+41, r26	; 0x29
    14a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	6f a1       	ldd	r22, Y+39	; 0x27
    14a6:	78 a5       	ldd	r23, Y+40	; 0x28
    14a8:	89 a5       	ldd	r24, Y+41	; 0x29
    14aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a ef       	ldi	r20, 0xFA	; 250
    14b2:	54 e4       	ldi	r21, 0x44	; 68
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8b a3       	std	Y+35, r24	; 0x23
    14be:	9c a3       	std	Y+36, r25	; 0x24
    14c0:	ad a3       	std	Y+37, r26	; 0x25
    14c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14c4:	6b a1       	ldd	r22, Y+35	; 0x23
    14c6:	7c a1       	ldd	r23, Y+36	; 0x24
    14c8:	8d a1       	ldd	r24, Y+37	; 0x25
    14ca:	9e a1       	ldd	r25, Y+38	; 0x26
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <LCD_vidInit+0x298>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9a a3       	std	Y+34, r25	; 0x22
    14e2:	89 a3       	std	Y+33, r24	; 0x21
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <LCD_vidInit+0x316>
	else if (__tmp > 65535)
    14e6:	6b a1       	ldd	r22, Y+35	; 0x23
    14e8:	7c a1       	ldd	r23, Y+36	; 0x24
    14ea:	8d a1       	ldd	r24, Y+37	; 0x25
    14ec:	9e a1       	ldd	r25, Y+38	; 0x26
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	4c f5       	brge	.+82     	; 0x1550 <LCD_vidInit+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1500:	78 a5       	ldd	r23, Y+40	; 0x28
    1502:	89 a5       	ldd	r24, Y+41	; 0x29
    1504:	9a a5       	ldd	r25, Y+42	; 0x2a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9a a3       	std	Y+34, r25	; 0x22
    1524:	89 a3       	std	Y+33, r24	; 0x21
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <LCD_vidInit+0x2f8>
    1528:	88 ec       	ldi	r24, 0xC8	; 200
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	98 a3       	std	Y+32, r25	; 0x20
    152e:	8f 8f       	std	Y+31, r24	; 0x1f
    1530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1532:	98 a1       	ldd	r25, Y+32	; 0x20
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_vidInit+0x2e6>
    1538:	98 a3       	std	Y+32, r25	; 0x20
    153a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	89 a1       	ldd	r24, Y+33	; 0x21
    153e:	9a a1       	ldd	r25, Y+34	; 0x22
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9a a3       	std	Y+34, r25	; 0x22
    1544:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	89 a1       	ldd	r24, Y+33	; 0x21
    1548:	9a a1       	ldd	r25, Y+34	; 0x22
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <LCD_vidInit+0x2da>
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <LCD_vidInit+0x32a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	6b a1       	ldd	r22, Y+35	; 0x23
    1552:	7c a1       	ldd	r23, Y+36	; 0x24
    1554:	8d a1       	ldd	r24, Y+37	; 0x25
    1556:	9e a1       	ldd	r25, Y+38	; 0x26
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	9e 8f       	std	Y+30, r25	; 0x1e
    156a:	8d 8f       	std	Y+29, r24	; 0x1d
    156c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    156e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <LCD_vidInit+0x322>
    1574:	9e 8f       	std	Y+30, r25	; 0x1e
    1576:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_vidSendCommand(0b00000001);
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e4       	ldi	r27, 0x40	; 64
    1586:	89 8f       	std	Y+25, r24	; 0x19
    1588:	9a 8f       	std	Y+26, r25	; 0x1a
    158a:	ab 8f       	std	Y+27, r26	; 0x1b
    158c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	69 8d       	ldd	r22, Y+25	; 0x19
    1590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8d 8b       	std	Y+21, r24	; 0x15
    15a8:	9e 8b       	std	Y+22, r25	; 0x16
    15aa:	af 8b       	std	Y+23, r26	; 0x17
    15ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ae:	6d 89       	ldd	r22, Y+21	; 0x15
    15b0:	7e 89       	ldd	r23, Y+22	; 0x16
    15b2:	8f 89       	ldd	r24, Y+23	; 0x17
    15b4:	98 8d       	ldd	r25, Y+24	; 0x18
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <LCD_vidInit+0x382>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <LCD_vidInit+0x400>
	else if (__tmp > 65535)
    15d0:	6d 89       	ldd	r22, Y+21	; 0x15
    15d2:	7e 89       	ldd	r23, Y+22	; 0x16
    15d4:	8f 89       	ldd	r24, Y+23	; 0x17
    15d6:	98 8d       	ldd	r25, Y+24	; 0x18
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <LCD_vidInit+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <LCD_vidInit+0x3e2>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9a 8b       	std	Y+18, r25	; 0x12
    1618:	89 8b       	std	Y+17, r24	; 0x11
    161a:	89 89       	ldd	r24, Y+17	; 0x11
    161c:	9a 89       	ldd	r25, Y+18	; 0x12
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_vidInit+0x3d0>
    1622:	9a 8b       	std	Y+18, r25	; 0x12
    1624:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8b 89       	ldd	r24, Y+19	; 0x13
    1628:	9c 89       	ldd	r25, Y+20	; 0x14
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <LCD_vidInit+0x3c4>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <LCD_vidInit+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	98 8b       	std	Y+16, r25	; 0x10
    1654:	8f 87       	std	Y+15, r24	; 0x0f
    1656:	8f 85       	ldd	r24, Y+15	; 0x0f
    1658:	98 89       	ldd	r25, Y+16	; 0x10
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_vidInit+0x40c>
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_vidSendCommand(0b00000110);
    1662:	86 e0       	ldi	r24, 0x06	; 6
    1664:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	a0 e8       	ldi	r26, 0x80	; 128
    166e:	bf e3       	ldi	r27, 0x3F	; 63
    1670:	8b 87       	std	Y+11, r24	; 0x0b
    1672:	9c 87       	std	Y+12, r25	; 0x0c
    1674:	ad 87       	std	Y+13, r26	; 0x0d
    1676:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1678:	6b 85       	ldd	r22, Y+11	; 0x0b
    167a:	7c 85       	ldd	r23, Y+12	; 0x0c
    167c:	8d 85       	ldd	r24, Y+13	; 0x0d
    167e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	4a ef       	ldi	r20, 0xFA	; 250
    1686:	54 e4       	ldi	r21, 0x44	; 68
    1688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	8f 83       	std	Y+7, r24	; 0x07
    1692:	98 87       	std	Y+8, r25	; 0x08
    1694:	a9 87       	std	Y+9, r26	; 0x09
    1696:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e8       	ldi	r20, 0x80	; 128
    16a6:	5f e3       	ldi	r21, 0x3F	; 63
    16a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	2c f4       	brge	.+10     	; 0x16ba <LCD_vidInit+0x46c>
		__ticks = 1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	3f c0       	rjmp	.+126    	; 0x1738 <LCD_vidInit+0x4ea>
	else if (__tmp > 65535)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	3f ef       	ldi	r19, 0xFF	; 255
    16c6:	4f e7       	ldi	r20, 0x7F	; 127
    16c8:	57 e4       	ldi	r21, 0x47	; 71
    16ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16ce:	18 16       	cp	r1, r24
    16d0:	4c f5       	brge	.+82     	; 0x1724 <LCD_vidInit+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e2       	ldi	r20, 0x20	; 32
    16e0:	51 e4       	ldi	r21, 0x41	; 65
    16e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	bc 01       	movw	r22, r24
    16ec:	cd 01       	movw	r24, r26
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <LCD_vidInit+0x4cc>
    16fc:	88 ec       	ldi	r24, 0xC8	; 200
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <LCD_vidInit+0x4ba>
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1710:	8d 81       	ldd	r24, Y+5	; 0x05
    1712:	9e 81       	ldd	r25, Y+6	; 0x06
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171a:	8d 81       	ldd	r24, Y+5	; 0x05
    171c:	9e 81       	ldd	r25, Y+6	; 0x06
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	69 f7       	brne	.-38     	; 0x16fc <LCD_vidInit+0x4ae>
    1722:	14 c0       	rjmp	.+40     	; 0x174c <LCD_vidInit+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <LCD_vidInit+0x4f6>
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    174c:	ca 5b       	subi	r28, 0xBA	; 186
    174e:	df 4f       	sbci	r29, 0xFF	; 255
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <LCD_vidSendWord>:

void LCD_vidSendWord (char * ptr)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <LCD_vidSendWord+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <LCD_vidSendWord+0x8>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;ptr[i]!='\0';i++)
    1774:	1a 82       	std	Y+2, r1	; 0x02
    1776:	19 82       	std	Y+1, r1	; 0x01
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <LCD_vidSendWord+0x34>
	{
		LCD_vidSendChar(ptr[i]);
    177a:	29 81       	ldd	r18, Y+1	; 0x01
    177c:	3a 81       	ldd	r19, Y+2	; 0x02
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	fc 01       	movw	r30, r24
    1784:	e2 0f       	add	r30, r18
    1786:	f3 1f       	adc	r31, r19
    1788:	80 81       	ld	r24, Z
    178a:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>

}

void LCD_vidSendWord (char * ptr)
{
	for(int i=0;ptr[i]!='\0';i++)
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	9a 81       	ldd	r25, Y+2	; 0x02
    1792:	01 96       	adiw	r24, 0x01	; 1
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	3a 81       	ldd	r19, Y+2	; 0x02
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	9c 81       	ldd	r25, Y+4	; 0x04
    17a0:	fc 01       	movw	r30, r24
    17a2:	e2 0f       	add	r30, r18
    17a4:	f3 1f       	adc	r31, r19
    17a6:	80 81       	ld	r24, Z
    17a8:	88 23       	and	r24, r24
    17aa:	39 f7       	brne	.-50     	; 0x177a <LCD_vidSendWord+0x16>
	{
		LCD_vidSendChar(ptr[i]);
	}
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <LCD_vidDisplayCustomChar>:
void LCD_vidDisplayCustomChar (u8 CharId)//from0 to 7
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	89 83       	std	Y+1, r24	; 0x01
	if(CharId<8)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	88 30       	cpi	r24, 0x08	; 8
    17ca:	18 f4       	brcc	.+6      	; 0x17d2 <LCD_vidDisplayCustomChar+0x18>
	{
	LCD_vidSendChar(CharId);
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>
	}
	}
    17d2:	0f 90       	pop	r0
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <LCD_vidSendNumber>:
void LCD_vidSendNumber (s32 num)
{
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	29 97       	sbiw	r28, 0x09	; 9
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	6e 83       	std	Y+6, r22	; 0x06
    17f8:	7f 83       	std	Y+7, r23	; 0x07
    17fa:	88 87       	std	Y+8, r24	; 0x08
    17fc:	99 87       	std	Y+9, r25	; 0x09
	if (num <0)
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	a8 85       	ldd	r26, Y+8	; 0x08
    1804:	b9 85       	ldd	r27, Y+9	; 0x09
    1806:	bb 23       	and	r27, r27
    1808:	94 f4       	brge	.+36     	; 0x182e <LCD_vidSendNumber+0x54>
		{
			num = num * (-1);
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	a8 85       	ldd	r26, Y+8	; 0x08
    1810:	b9 85       	ldd	r27, Y+9	; 0x09
    1812:	b0 95       	com	r27
    1814:	a0 95       	com	r26
    1816:	90 95       	com	r25
    1818:	81 95       	neg	r24
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	af 4f       	sbci	r26, 0xFF	; 255
    181e:	bf 4f       	sbci	r27, 0xFF	; 255
    1820:	8e 83       	std	Y+6, r24	; 0x06
    1822:	9f 83       	std	Y+7, r25	; 0x07
    1824:	a8 87       	std	Y+8, r26	; 0x08
    1826:	b9 87       	std	Y+9, r27	; 0x09
			LCD_vidSendChar('-');
    1828:	8d e2       	ldi	r24, 0x2D	; 45
    182a:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>

		}
	s32 rev =0;
    182e:	1a 82       	std	Y+2, r1	; 0x02
    1830:	1b 82       	std	Y+3, r1	; 0x03
    1832:	1c 82       	std	Y+4, r1	; 0x04
    1834:	1d 82       	std	Y+5, r1	; 0x05
	u8 flag =0;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	41 c0       	rjmp	.+130    	; 0x18bc <LCD_vidSendNumber+0xe2>



	while(num!=0)
	{
		rev = rev*10 + num%10;
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	9b 81       	ldd	r25, Y+3	; 0x03
    183e:	ac 81       	ldd	r26, Y+4	; 0x04
    1840:	bd 81       	ldd	r27, Y+5	; 0x05
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__mulsi3>
    1852:	7b 01       	movw	r14, r22
    1854:	8c 01       	movw	r16, r24
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	9f 81       	ldd	r25, Y+7	; 0x07
    185a:	a8 85       	ldd	r26, Y+8	; 0x08
    185c:	b9 85       	ldd	r27, Y+9	; 0x09
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	50 e0       	ldi	r21, 0x00	; 0
    1866:	bc 01       	movw	r22, r24
    1868:	cd 01       	movw	r24, r26
    186a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodsi4>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8e 0d       	add	r24, r14
    1874:	9f 1d       	adc	r25, r15
    1876:	a0 1f       	adc	r26, r16
    1878:	b1 1f       	adc	r27, r17
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	9b 83       	std	Y+3, r25	; 0x03
    187e:	ac 83       	std	Y+4, r26	; 0x04
    1880:	bd 83       	std	Y+5, r27	; 0x05
		if (rev == 0 )
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	9b 81       	ldd	r25, Y+3	; 0x03
    1886:	ac 81       	ldd	r26, Y+4	; 0x04
    1888:	bd 81       	ldd	r27, Y+5	; 0x05
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	a1 05       	cpc	r26, r1
    188e:	b1 05       	cpc	r27, r1
    1890:	19 f4       	brne	.+6      	; 0x1898 <LCD_vidSendNumber+0xbe>
		{
			flag ++;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	89 83       	std	Y+1, r24	; 0x01

		}
		num/=10;
    1898:	8e 81       	ldd	r24, Y+6	; 0x06
    189a:	9f 81       	ldd	r25, Y+7	; 0x07
    189c:	a8 85       	ldd	r26, Y+8	; 0x08
    189e:	b9 85       	ldd	r27, Y+9	; 0x09
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e0       	ldi	r20, 0x00	; 0
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodsi4>
    18b0:	da 01       	movw	r26, r20
    18b2:	c9 01       	movw	r24, r18
    18b4:	8e 83       	std	Y+6, r24	; 0x06
    18b6:	9f 83       	std	Y+7, r25	; 0x07
    18b8:	a8 87       	std	Y+8, r26	; 0x08
    18ba:	b9 87       	std	Y+9, r27	; 0x09
	s32 rev =0;
	u8 flag =0;



	while(num!=0)
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	a8 85       	ldd	r26, Y+8	; 0x08
    18c2:	b9 85       	ldd	r27, Y+9	; 0x09
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	a1 05       	cpc	r26, r1
    18c8:	b1 05       	cpc	r27, r1
    18ca:	09 f0       	breq	.+2      	; 0x18ce <LCD_vidSendNumber+0xf4>
    18cc:	b6 cf       	rjmp	.-148    	; 0x183a <LCD_vidSendNumber+0x60>
    18ce:	23 c0       	rjmp	.+70     	; 0x1916 <LCD_vidSendNumber+0x13c>

	while (rev!=0)
	{


		LCD_vidSendChar((rev%10)+'0');
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	ac 81       	ldd	r26, Y+4	; 0x04
    18d6:	bd 81       	ldd	r27, Y+5	; 0x05
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e0       	ldi	r20, 0x00	; 0
    18de:	50 e0       	ldi	r21, 0x00	; 0
    18e0:	bc 01       	movw	r22, r24
    18e2:	cd 01       	movw	r24, r26
    18e4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodsi4>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	80 5d       	subi	r24, 0xD0	; 208
    18ee:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>

		rev /= 10;
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	ac 81       	ldd	r26, Y+4	; 0x04
    18f8:	bd 81       	ldd	r27, Y+5	; 0x05
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__divmodsi4>
    190a:	da 01       	movw	r26, r20
    190c:	c9 01       	movw	r24, r18
    190e:	8a 83       	std	Y+2, r24	; 0x02
    1910:	9b 83       	std	Y+3, r25	; 0x03
    1912:	ac 83       	std	Y+4, r26	; 0x04
    1914:	bd 83       	std	Y+5, r27	; 0x05
		}
		num/=10;

	}

	while (rev!=0)
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	9b 81       	ldd	r25, Y+3	; 0x03
    191a:	ac 81       	ldd	r26, Y+4	; 0x04
    191c:	bd 81       	ldd	r27, Y+5	; 0x05
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	a1 05       	cpc	r26, r1
    1922:	b1 05       	cpc	r27, r1
    1924:	a9 f6       	brne	.-86     	; 0x18d0 <LCD_vidSendNumber+0xf6>

		LCD_vidSendChar((rev%10)+'0');

		rev /= 10;
	}
	if (flag !=0)
    1926:	89 81       	ldd	r24, Y+1	; 0x01
    1928:	88 23       	and	r24, r24
    192a:	51 f0       	breq	.+20     	; 0x1940 <LCD_vidSendNumber+0x166>
    192c:	06 c0       	rjmp	.+12     	; 0x193a <LCD_vidSendNumber+0x160>
		{
		while(flag!=0)
		{
		LCD_vidSendChar('0');
    192e:	80 e3       	ldi	r24, 0x30	; 48
    1930:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>
			flag --;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	81 50       	subi	r24, 0x01	; 1
    1938:	89 83       	std	Y+1, r24	; 0x01

		rev /= 10;
	}
	if (flag !=0)
		{
		while(flag!=0)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	88 23       	and	r24, r24
    193e:	b9 f7       	brne	.-18     	; 0x192e <LCD_vidSendNumber+0x154>
			flag --;
		}
		}


}
    1940:	29 96       	adiw	r28, 0x09	; 9
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	08 95       	ret

0000195a <LCD_vidSaveCustomChar>:

void LCD_vidSaveCustomChar (u8 CharArr[],u8 CharId)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <LCD_vidSaveCustomChar+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <LCD_vidSaveCustomChar+0x8>
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	6d 83       	std	Y+5, r22	; 0x05
	if(CharId<8)
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	88 30       	cpi	r24, 0x08	; 8
    1972:	30 f5       	brcc	.+76     	; 0x19c0 <LCD_vidSaveCustomChar+0x66>
	{
	LCD_vidSendCommand(0b01000000 + (8 * CharId));
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	08 96       	adiw	r24, 0x08	; 8
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
	for(int i = 0 ; i<8 ; i++)
    198c:	1a 82       	std	Y+2, r1	; 0x02
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_vidSaveCustomChar+0x56>
	{
		LCD_vidSendChar(CharArr[i]);
    1992:	29 81       	ldd	r18, Y+1	; 0x01
    1994:	3a 81       	ldd	r19, Y+2	; 0x02
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	fc 01       	movw	r30, r24
    199c:	e2 0f       	add	r30, r18
    199e:	f3 1f       	adc	r31, r19
    19a0:	80 81       	ld	r24, Z
    19a2:	0e 94 f7 06 	call	0xdee	; 0xdee <LCD_vidSendChar>
void LCD_vidSaveCustomChar (u8 CharArr[],u8 CharId)
{
	if(CharId<8)
	{
	LCD_vidSendCommand(0b01000000 + (8 * CharId));
	for(int i = 0 ; i<8 ; i++)
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	9a 81       	ldd	r25, Y+2	; 0x02
    19b4:	88 30       	cpi	r24, 0x08	; 8
    19b6:	91 05       	cpc	r25, r1
    19b8:	64 f3       	brlt	.-40     	; 0x1992 <LCD_vidSaveCustomChar+0x38>
	{
		LCD_vidSendChar(CharArr[i]);
	}
	LCD_vidSendCommand(0b10000000 );
    19ba:	80 e8       	ldi	r24, 0x80	; 128
    19bc:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
	}
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <LCD_vidClear_screen>:

void LCD_vidClear_screen (void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	LCD_vidSendCommand(0b00000001);
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
}
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <LCD_vidSet_cursor>:

void LCD_vidSet_cursor (u8 x,u8 y)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <LCD_vidSet_cursor+0x6>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
	if(x==1)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	21 f4       	brne	.+8      	; 0x1a00 <LCD_vidSet_cursor+0x1c>
		{
		LCD_vidSendCommand(0x80+y-1);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	81 58       	subi	r24, 0x81	; 129
    19fc:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
		}
		if(x==2)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	21 f4       	brne	.+8      	; 0x1a0e <LCD_vidSet_cursor+0x2a>
			{
			LCD_vidSendCommand(0xc0+y-1);
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	81 54       	subi	r24, 0x41	; 65
    1a0a:	0e 94 0f 08 	call	0x101e	; 0x101e <LCD_vidSendCommand>
			}
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <KPD_vInit>:

#define no_col 4
#define no_row 4

void KPD_vInit (void)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	//DIO_vWritePortDirection(DIO_PORTC,0x0f);
	DDRC=0x0F;
    1a20:	e4 e3       	ldi	r30, 0x34	; 52
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8f e0       	ldi	r24, 0x0F	; 15
    1a26:	80 83       	st	Z, r24
	//DIO_vWritePortVAlue(DIO_PORTC,0xff);
	PORTC=0xFF;
    1a28:	e5 e3       	ldi	r30, 0x35	; 53
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	80 83       	st	Z, r24
}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(void)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	61 97       	sbiw	r28, 0x11	; 17
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
	u8 pressed_key=0;
    1a4a:	19 8a       	std	Y+17, r1	; 0x11
	u8 col;
	u8 row;
	for(col=0;col<no_col;col++)
    1a4c:	18 8a       	std	Y+16, r1	; 0x10
    1a4e:	d9 c0       	rjmp	.+434    	; 0x1c02 <KPD_u8GetPressedKey+0x1cc>
	{
		//DIO_vWritePinVAlue(DIO_PORTC,col,DIO_PIN_LOW);
		CLR_BIT(PORTC,col);
    1a50:	a5 e3       	ldi	r26, 0x35	; 53
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e5 e3       	ldi	r30, 0x35	; 53
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <KPD_u8GetPressedKey+0x38>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <KPD_u8GetPressedKey+0x34>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
		for(row=0;row<no_row;row++)
    1a78:	1f 86       	std	Y+15, r1	; 0x0f
    1a7a:	a9 c0       	rjmp	.+338    	; 0x1bce <KPD_u8GetPressedKey+0x198>
		{
			if(GET_BIT(PINC,(row+4))/*DIO_u8ReadPinVAlue(DIO_PORTC,row+4)*/==0)
    1a7c:	e3 e3       	ldi	r30, 0x33	; 51
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	04 96       	adiw	r24, 0x04	; 4
    1a8e:	a9 01       	movw	r20, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <KPD_u8GetPressedKey+0x60>
    1a92:	55 95       	asr	r21
    1a94:	47 95       	ror	r20
    1a96:	8a 95       	dec	r24
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <KPD_u8GetPressedKey+0x5c>
    1a9a:	ca 01       	movw	r24, r20
    1a9c:	81 70       	andi	r24, 0x01	; 1
    1a9e:	90 70       	andi	r25, 0x00	; 0
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	61 f4       	brne	.+24     	; 0x1abc <KPD_u8GetPressedKey+0x86>
			{
				pressed_key = (row+(col*4)+1);
    1aa4:	88 89       	ldd	r24, Y+16	; 0x10
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab6:	89 0f       	add	r24, r25
    1ab8:	8f 5f       	subi	r24, 0xFF	; 255
    1aba:	89 8b       	std	Y+17, r24	; 0x11
			}
				while(GET_BIT(PINC,(row+4))/*DIO_u8ReadPinVAlue(DIO_PORTC,row+4)*/==0){}
    1abc:	e3 e3       	ldi	r30, 0x33	; 51
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	04 96       	adiw	r24, 0x04	; 4
    1ace:	a9 01       	movw	r20, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <KPD_u8GetPressedKey+0xa0>
    1ad2:	55 95       	asr	r21
    1ad4:	47 95       	ror	r20
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <KPD_u8GetPressedKey+0x9c>
    1ada:	ca 01       	movw	r24, r20
    1adc:	81 70       	andi	r24, 0x01	; 1
    1ade:	90 70       	andi	r25, 0x00	; 0
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	61 f3       	breq	.-40     	; 0x1abc <KPD_u8GetPressedKey+0x86>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 ea       	ldi	r26, 0xA0	; 160
    1aea:	b0 e4       	ldi	r27, 0x40	; 64
    1aec:	8b 87       	std	Y+11, r24	; 0x0b
    1aee:	9c 87       	std	Y+12, r25	; 0x0c
    1af0:	ad 87       	std	Y+13, r26	; 0x0d
    1af2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8f 83       	std	Y+7, r24	; 0x07
    1b0e:	98 87       	std	Y+8, r25	; 0x08
    1b10:	a9 87       	std	Y+9, r26	; 0x09
    1b12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <KPD_u8GetPressedKey+0x100>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <KPD_u8GetPressedKey+0x17e>
	else if (__tmp > 65535)
    1b36:	6f 81       	ldd	r22, Y+7	; 0x07
    1b38:	78 85       	ldd	r23, Y+8	; 0x08
    1b3a:	89 85       	ldd	r24, Y+9	; 0x09
    1b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <KPD_u8GetPressedKey+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <KPD_u8GetPressedKey+0x160>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9c 83       	std	Y+4, r25	; 0x04
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <KPD_u8GetPressedKey+0x14e>
    1b88:	9c 83       	std	Y+4, r25	; 0x04
    1b8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <KPD_u8GetPressedKey+0x142>
    1b9e:	14 c0       	rjmp	.+40     	; 0x1bc8 <KPD_u8GetPressedKey+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <KPD_u8GetPressedKey+0x18a>
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01
	u8 row;
	for(col=0;col<no_col;col++)
	{
		//DIO_vWritePinVAlue(DIO_PORTC,col,DIO_PIN_LOW);
		CLR_BIT(PORTC,col);
		for(row=0;row<no_row;row++)
    1bc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bca:	8f 5f       	subi	r24, 0xFF	; 255
    1bcc:	8f 87       	std	Y+15, r24	; 0x0f
    1bce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd0:	84 30       	cpi	r24, 0x04	; 4
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <KPD_u8GetPressedKey+0x1a0>
    1bd4:	53 cf       	rjmp	.-346    	; 0x1a7c <KPD_u8GetPressedKey+0x46>
				_delay_ms(5);


		}
		//DIO_vWritePinVAlue(DIO_PORTC,col,DIO_PIN_HIGH);
		SET_BIT(PORTC,col);
    1bd6:	a5 e3       	ldi	r26, 0x35	; 53
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e5 e3       	ldi	r30, 0x35	; 53
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	88 89       	ldd	r24, Y+16	; 0x10
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <KPD_u8GetPressedKey+0x1be>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <KPD_u8GetPressedKey+0x1ba>
    1bf8:	84 2b       	or	r24, r20
    1bfa:	8c 93       	st	X, r24
u8 KPD_u8GetPressedKey(void)
{
	u8 pressed_key=0;
	u8 col;
	u8 row;
	for(col=0;col<no_col;col++)
    1bfc:	88 89       	ldd	r24, Y+16	; 0x10
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	88 8b       	std	Y+16, r24	; 0x10
    1c02:	88 89       	ldd	r24, Y+16	; 0x10
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	08 f4       	brcc	.+2      	; 0x1c0a <KPD_u8GetPressedKey+0x1d4>
    1c08:	23 cf       	rjmp	.-442    	; 0x1a50 <KPD_u8GetPressedKey+0x1a>

		}
		//DIO_vWritePinVAlue(DIO_PORTC,col,DIO_PIN_HIGH);
		SET_BIT(PORTC,col);
	}
	return pressed_key;
    1c0a:	89 89       	ldd	r24, Y+17	; 0x11


}
    1c0c:	61 96       	adiw	r28, 0x11	; 17
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <GIE_vEnable>:
#include "GIE_interface.h"
#include "GIE_CFG.h"
#include "GIE_private.h"

void GIE_vEnable (void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_BIT);
    1c26:	af e5       	ldi	r26, 0x5F	; 95
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ef e5       	ldi	r30, 0x5F	; 95
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	8c 93       	st	X, r24
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <GIE_vDisable>:
void GIE_vDisable (void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I_BIT);
    1c42:	af e5       	ldi	r26, 0x5F	; 95
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ef e5       	ldi	r30, 0x5F	; 95
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 77       	andi	r24, 0x7F	; 127
    1c4e:	8c 93       	st	X, r24
}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <EXTI_vRegisterCallback>:
static void (*G_EXTI1_Callback)(void);

static void (*G_EXTI2_Callback)(void);

void EXTI_vRegisterCallback (u8 A_u8ExtiPin, void (*fptr)(void)) //register means reserve
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <EXTI_vRegisterCallback+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <EXTI_vRegisterCallback+0x8>
    1c5e:	0f 92       	push	r0
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	7b 83       	std	Y+3, r23	; 0x03
    1c68:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8ExtiPin)
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	3d 83       	std	Y+5, r19	; 0x05
    1c72:	2c 83       	std	Y+4, r18	; 0x04
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	81 f0       	breq	.+32     	; 0x1c9e <EXTI_vRegisterCallback+0x48>
    1c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c80:	3d 81       	ldd	r19, Y+5	; 0x05
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 05       	cpc	r19, r1
    1c86:	91 f0       	breq	.+36     	; 0x1cac <EXTI_vRegisterCallback+0x56>
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	a1 f4       	brne	.+40     	; 0x1cb8 <EXTI_vRegisterCallback+0x62>
	{
	case EXTI_0:
		G_EXTI0_Callback=fptr;
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	9b 81       	ldd	r25, Y+3	; 0x03
    1c94:	90 93 6b 00 	sts	0x006B, r25
    1c98:	80 93 6a 00 	sts	0x006A, r24
    1c9c:	0d c0       	rjmp	.+26     	; 0x1cb8 <EXTI_vRegisterCallback+0x62>
		break;
	case EXTI_1:
		G_EXTI1_Callback = fptr;
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	90 93 6d 00 	sts	0x006D, r25
    1ca6:	80 93 6c 00 	sts	0x006C, r24
    1caa:	06 c0       	rjmp	.+12     	; 0x1cb8 <EXTI_vRegisterCallback+0x62>
		break;
	case EXTI_2:
		G_EXTI2_Callback =fptr;
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	90 93 6f 00 	sts	0x006F, r25
    1cb4:	80 93 6e 00 	sts	0x006E, r24
		break;
	}
}
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <EXTI_vInit>:

void EXTI_vInit (void)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	/*1- make pins input*/
#if INTERRUPT == EXTI_0
	DIO_vWritePinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
    1cd0:	83 e0       	ldi	r24, 0x03	; 3
    1cd2:	62 e0       	ldi	r22, 0x02	; 2
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 39 10 	call	0x2072	; 0x2072 <DIO_vWritePinDirection>
	DIO_vWritePinVAlue(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 39 11 	call	0x2272	; 0x2272 <DIO_vWritePinVAlue>
	/*2- default sense control which is falling edge*/
	SET_BIT(MCUCR,ISC01);
    1ce4:	a5 e5       	ldi	r26, 0x55	; 85
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e5       	ldi	r30, 0x55	; 85
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC00);
    1cf2:	a5 e5       	ldi	r26, 0x55	; 85
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e5 e5       	ldi	r30, 0x55	; 85
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	8e 7f       	andi	r24, 0xFE	; 254
    1cfe:	8c 93       	st	X, r24
		/*3- enable interrupt*/
	SET_BIT(GICR,INT0);
    1d00:	ab e5       	ldi	r26, 0x5B	; 91
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	eb e5       	ldi	r30, 0x5B	; 91
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 64       	ori	r24, 0x40	; 64
    1d0c:	8c 93       	st	X, r24
	SET_BIT(GICR,5);
#endif



}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <EXTI_vSetSenseCtrl>:
void EXTI_vSetSenseCtrl (u8 A_u8ExtiPin, u8 A_u8SenseCtrl)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	2a 97       	sbiw	r28, 0x0a	; 10
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8ExtiPin)
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	3a 87       	std	Y+10, r19	; 0x0a
    1d34:	29 87       	std	Y+9, r18	; 0x09
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	c1 f1       	breq	.+112    	; 0x1db0 <EXTI_vSetSenseCtrl+0x9c>
    1d40:	29 85       	ldd	r18, Y+9	; 0x09
    1d42:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d44:	22 30       	cpi	r18, 0x02	; 2
    1d46:	31 05       	cpc	r19, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <EXTI_vSetSenseCtrl+0x38>
    1d4a:	5f c0       	rjmp	.+190    	; 0x1e0a <EXTI_vSetSenseCtrl+0xf6>
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	09 f0       	breq	.+2      	; 0x1d56 <EXTI_vSetSenseCtrl+0x42>
    1d54:	78 c0       	rjmp	.+240    	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
		{
		case EXTI_0:
			switch(A_u8SenseCtrl)
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	38 87       	std	Y+8, r19	; 0x08
    1d5e:	2f 83       	std	Y+7, r18	; 0x07
    1d60:	8f 81       	ldd	r24, Y+7	; 0x07
    1d62:	98 85       	ldd	r25, Y+8	; 0x08
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	31 f0       	breq	.+12     	; 0x1d74 <EXTI_vSetSenseCtrl+0x60>
    1d68:	2f 81       	ldd	r18, Y+7	; 0x07
    1d6a:	38 85       	ldd	r19, Y+8	; 0x08
    1d6c:	21 30       	cpi	r18, 0x01	; 1
    1d6e:	31 05       	cpc	r19, r1
    1d70:	81 f0       	breq	.+32     	; 0x1d92 <EXTI_vSetSenseCtrl+0x7e>
    1d72:	69 c0       	rjmp	.+210    	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
			{
			case FAL_EDG:
				SET_BIT(MCUCR,ISC01);
    1d74:	a5 e5       	ldi	r26, 0x55	; 85
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e5 e5       	ldi	r30, 0x55	; 85
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	82 60       	ori	r24, 0x02	; 2
    1d80:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC00);
    1d82:	a5 e5       	ldi	r26, 0x55	; 85
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e5       	ldi	r30, 0x55	; 85
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8e 7f       	andi	r24, 0xFE	; 254
    1d8e:	8c 93       	st	X, r24
    1d90:	5a c0       	rjmp	.+180    	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
				break;
			case RIS_EDG:
				SET_BIT(MCUCR,ISC01);
    1d92:	a5 e5       	ldi	r26, 0x55	; 85
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e5 e5       	ldi	r30, 0x55	; 85
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	82 60       	ori	r24, 0x02	; 2
    1d9e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC00);
    1da0:	a5 e5       	ldi	r26, 0x55	; 85
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e5 e5       	ldi	r30, 0x55	; 85
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	81 60       	ori	r24, 0x01	; 1
    1dac:	8c 93       	st	X, r24
    1dae:	4b c0       	rjmp	.+150    	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
				break;
			}
			break;
		case EXTI_1:
			switch(A_u8SenseCtrl)
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3e 83       	std	Y+6, r19	; 0x06
    1db8:	2d 83       	std	Y+5, r18	; 0x05
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <EXTI_vSetSenseCtrl+0xba>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	21 30       	cpi	r18, 0x01	; 1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	81 f0       	breq	.+32     	; 0x1dec <EXTI_vSetSenseCtrl+0xd8>
    1dcc:	3c c0       	rjmp	.+120    	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
			{
			case FAL_EDG:
				SET_BIT(MCUCR,ISC11);
    1dce:	a5 e5       	ldi	r26, 0x55	; 85
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e5 e5       	ldi	r30, 0x55	; 85
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	8c 93       	st	X, r24
				CLR_BIT(MCUCR,ISC10);
    1ddc:	a5 e5       	ldi	r26, 0x55	; 85
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e5       	ldi	r30, 0x55	; 85
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8b 7f       	andi	r24, 0xFB	; 251
    1de8:	8c 93       	st	X, r24
    1dea:	2d c0       	rjmp	.+90     	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
				break;
			case RIS_EDG:
				SET_BIT(MCUCR,ISC10);
    1dec:	a5 e5       	ldi	r26, 0x55	; 85
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e5       	ldi	r30, 0x55	; 85
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	84 60       	ori	r24, 0x04	; 4
    1df8:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC11);
    1dfa:	a5 e5       	ldi	r26, 0x55	; 85
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e5 e5       	ldi	r30, 0x55	; 85
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	88 60       	ori	r24, 0x08	; 8
    1e06:	8c 93       	st	X, r24
    1e08:	1e c0       	rjmp	.+60     	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
				break;
			}
			break;
		case EXTI_2:
			switch(A_u8SenseCtrl)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3c 83       	std	Y+4, r19	; 0x04
    1e12:	2b 83       	std	Y+3, r18	; 0x03
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	31 f0       	breq	.+12     	; 0x1e28 <EXTI_vSetSenseCtrl+0x114>
    1e1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e20:	21 30       	cpi	r18, 0x01	; 1
    1e22:	31 05       	cpc	r19, r1
    1e24:	49 f0       	breq	.+18     	; 0x1e38 <EXTI_vSetSenseCtrl+0x124>
    1e26:	0f c0       	rjmp	.+30     	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
			{
			case FAL_EDG:
				CLR_BIT(MCUCSR,ISC2);
    1e28:	a4 e5       	ldi	r26, 0x54	; 84
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	e4 e5       	ldi	r30, 0x54	; 84
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 7b       	andi	r24, 0xBF	; 191
    1e34:	8c 93       	st	X, r24
    1e36:	07 c0       	rjmp	.+14     	; 0x1e46 <EXTI_vSetSenseCtrl+0x132>
				break;
			case RIS_EDG:
				SET_BIT(MCUCSR,ISC2);
    1e38:	a4 e5       	ldi	r26, 0x54	; 84
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	e4 e5       	ldi	r30, 0x54	; 84
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	80 64       	ori	r24, 0x40	; 64
    1e44:	8c 93       	st	X, r24
				break;
			}
			break;
		}
}
    1e46:	2a 96       	adiw	r28, 0x0a	; 10
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <EXTI_vEnableInterrupt>:
void EXTI_vEnableInterrupt (u8 A_u8ExtiPin, u8 A_u8SenseCtrl)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <EXTI_vEnableInterrupt+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <EXTI_vEnableInterrupt+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_vSetSenseCtrl(A_u8ExtiPin,A_u8SenseCtrl);
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	6a 81       	ldd	r22, Y+2	; 0x02
    1e6c:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <EXTI_vSetSenseCtrl>
	switch(A_u8ExtiPin)
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	3c 83       	std	Y+4, r19	; 0x04
    1e78:	2b 83       	std	Y+3, r18	; 0x03
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	91 05       	cpc	r25, r1
    1e82:	89 f0       	breq	.+34     	; 0x1ea6 <EXTI_vEnableInterrupt+0x4e>
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	22 30       	cpi	r18, 0x02	; 2
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	a1 f0       	breq	.+40     	; 0x1eb6 <EXTI_vEnableInterrupt+0x5e>
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	9c 81       	ldd	r25, Y+4	; 0x04
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	b9 f4       	brne	.+46     	; 0x1ec4 <EXTI_vEnableInterrupt+0x6c>
	{
	case EXTI_0:
		SET_BIT(GICR,INT0);
    1e96:	ab e5       	ldi	r26, 0x5B	; 91
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	eb e5       	ldi	r30, 0x5B	; 91
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	80 64       	ori	r24, 0x40	; 64
    1ea2:	8c 93       	st	X, r24
    1ea4:	0f c0       	rjmp	.+30     	; 0x1ec4 <EXTI_vEnableInterrupt+0x6c>
		break;
	case EXTI_1:
		SET_BIT(GICR,INT1);
    1ea6:	ab e5       	ldi	r26, 0x5B	; 91
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	eb e5       	ldi	r30, 0x5B	; 91
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 68       	ori	r24, 0x80	; 128
    1eb2:	8c 93       	st	X, r24
    1eb4:	07 c0       	rjmp	.+14     	; 0x1ec4 <EXTI_vEnableInterrupt+0x6c>
		break;
	case EXTI_2:
		SET_BIT(GICR,INT2);
    1eb6:	ab e5       	ldi	r26, 0x5B	; 91
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	eb e5       	ldi	r30, 0x5B	; 91
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 62       	ori	r24, 0x20	; 32
    1ec2:	8c 93       	st	X, r24
		break;
	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <EXTI_vDisableInterrupt>:
void EXTI_vDisableInterrupt (u8 A_u8ExtiPin)
{
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <EXTI_vDisableInterrupt+0x6>
    1ed8:	0f 92       	push	r0
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8ExtiPin)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3b 83       	std	Y+3, r19	; 0x03
    1ee8:	2a 83       	std	Y+2, r18	; 0x02
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	9b 81       	ldd	r25, Y+3	; 0x03
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	89 f0       	breq	.+34     	; 0x1f16 <EXTI_vDisableInterrupt+0x44>
    1ef4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ef6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	31 05       	cpc	r19, r1
    1efc:	a1 f0       	breq	.+40     	; 0x1f26 <EXTI_vDisableInterrupt+0x54>
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	b9 f4       	brne	.+46     	; 0x1f34 <EXTI_vDisableInterrupt+0x62>
		{
		case EXTI_0:
			CLR_BIT(GICR,INT0);
    1f06:	ab e5       	ldi	r26, 0x5B	; 91
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	eb e5       	ldi	r30, 0x5B	; 91
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 7b       	andi	r24, 0xBF	; 191
    1f12:	8c 93       	st	X, r24
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <EXTI_vDisableInterrupt+0x62>
			break;
		case EXTI_1:
			CLR_BIT(GICR,INT1);
    1f16:	ab e5       	ldi	r26, 0x5B	; 91
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	eb e5       	ldi	r30, 0x5B	; 91
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 77       	andi	r24, 0x7F	; 127
    1f22:	8c 93       	st	X, r24
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <EXTI_vDisableInterrupt+0x62>
			break;
		case EXTI_2:
			CLR_BIT(GICR,INT2);
    1f26:	ab e5       	ldi	r26, 0x5B	; 91
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	eb e5       	ldi	r30, 0x5B	; 91
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 7d       	andi	r24, 0xDF	; 223
    1f32:	8c 93       	st	X, r24
			break;
		}
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <__vector_1>:

void __vector_1 (void) __attribute__((signal)); //attribute order of elcompiler 34an tdif option llfunction (cancel optimization t2fl el global 2bl mtd5ol 34an tmn3 el nesting
void __vector_1 (void)
{
    1f40:	1f 92       	push	r1
    1f42:	0f 92       	push	r0
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	0f 92       	push	r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	2f 93       	push	r18
    1f4c:	3f 93       	push	r19
    1f4e:	4f 93       	push	r20
    1f50:	5f 93       	push	r21
    1f52:	6f 93       	push	r22
    1f54:	7f 93       	push	r23
    1f56:	8f 93       	push	r24
    1f58:	9f 93       	push	r25
    1f5a:	af 93       	push	r26
    1f5c:	bf 93       	push	r27
    1f5e:	ef 93       	push	r30
    1f60:	ff 93       	push	r31
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI0_Callback!=NULL)
    1f6a:	80 91 6a 00 	lds	r24, 0x006A
    1f6e:	90 91 6b 00 	lds	r25, 0x006B
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	29 f0       	breq	.+10     	; 0x1f80 <__vector_1+0x40>
	{
		G_EXTI0_Callback();
    1f76:	e0 91 6a 00 	lds	r30, 0x006A
    1f7a:	f0 91 6b 00 	lds	r31, 0x006B
    1f7e:	09 95       	icall
	}
}
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	ff 91       	pop	r31
    1f86:	ef 91       	pop	r30
    1f88:	bf 91       	pop	r27
    1f8a:	af 91       	pop	r26
    1f8c:	9f 91       	pop	r25
    1f8e:	8f 91       	pop	r24
    1f90:	7f 91       	pop	r23
    1f92:	6f 91       	pop	r22
    1f94:	5f 91       	pop	r21
    1f96:	4f 91       	pop	r20
    1f98:	3f 91       	pop	r19
    1f9a:	2f 91       	pop	r18
    1f9c:	0f 90       	pop	r0
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	0f 90       	pop	r0
    1fa2:	1f 90       	pop	r1
    1fa4:	18 95       	reti

00001fa6 <__vector_3>:

void __vector_3 (void) __attribute__((signal)); //attribute order of elcompiler 34an tdif option llfunction (cancel optimization t2fl el global 2bl mtd5ol 34an tmn3 el nesting
void __vector_3 (void)
{
    1fa6:	1f 92       	push	r1
    1fa8:	0f 92       	push	r0
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	0f 92       	push	r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	2f 93       	push	r18
    1fb2:	3f 93       	push	r19
    1fb4:	4f 93       	push	r20
    1fb6:	5f 93       	push	r21
    1fb8:	6f 93       	push	r22
    1fba:	7f 93       	push	r23
    1fbc:	8f 93       	push	r24
    1fbe:	9f 93       	push	r25
    1fc0:	af 93       	push	r26
    1fc2:	bf 93       	push	r27
    1fc4:	ef 93       	push	r30
    1fc6:	ff 93       	push	r31
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI0_Callback!=NULL)
    1fd0:	80 91 6a 00 	lds	r24, 0x006A
    1fd4:	90 91 6b 00 	lds	r25, 0x006B
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	29 f0       	breq	.+10     	; 0x1fe6 <__vector_3+0x40>
	{
		G_EXTI1_Callback();
    1fdc:	e0 91 6c 00 	lds	r30, 0x006C
    1fe0:	f0 91 6d 00 	lds	r31, 0x006D
    1fe4:	09 95       	icall
	}
}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	ff 91       	pop	r31
    1fec:	ef 91       	pop	r30
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	7f 91       	pop	r23
    1ff8:	6f 91       	pop	r22
    1ffa:	5f 91       	pop	r21
    1ffc:	4f 91       	pop	r20
    1ffe:	3f 91       	pop	r19
    2000:	2f 91       	pop	r18
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__vector_5>:

void __vector_5 (void) __attribute__((signal)); //attribute order of elcompiler 34an tdif option llfunction (cancel optimization t2fl el global 2bl mtd5ol 34an tmn3 el nesting
void __vector_5 (void)
{
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	2f 93       	push	r18
    2018:	3f 93       	push	r19
    201a:	4f 93       	push	r20
    201c:	5f 93       	push	r21
    201e:	6f 93       	push	r22
    2020:	7f 93       	push	r23
    2022:	8f 93       	push	r24
    2024:	9f 93       	push	r25
    2026:	af 93       	push	r26
    2028:	bf 93       	push	r27
    202a:	ef 93       	push	r30
    202c:	ff 93       	push	r31
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
	if(G_EXTI0_Callback!=NULL)
    2036:	80 91 6a 00 	lds	r24, 0x006A
    203a:	90 91 6b 00 	lds	r25, 0x006B
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	29 f0       	breq	.+10     	; 0x204c <__vector_5+0x40>
	{
		G_EXTI2_Callback();
    2042:	e0 91 6e 00 	lds	r30, 0x006E
    2046:	f0 91 6f 00 	lds	r31, 0x006F
    204a:	09 95       	icall
	}
}
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	ff 91       	pop	r31
    2052:	ef 91       	pop	r30
    2054:	bf 91       	pop	r27
    2056:	af 91       	pop	r26
    2058:	9f 91       	pop	r25
    205a:	8f 91       	pop	r24
    205c:	7f 91       	pop	r23
    205e:	6f 91       	pop	r22
    2060:	5f 91       	pop	r21
    2062:	4f 91       	pop	r20
    2064:	3f 91       	pop	r19
    2066:	2f 91       	pop	r18
    2068:	0f 90       	pop	r0
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	0f 90       	pop	r0
    206e:	1f 90       	pop	r1
    2070:	18 95       	reti

00002072 <DIO_vWritePinDirection>:




void DIO_vWritePinDirection(u8 A_u8PortID, u8 A_u8PinNo , u8 A_u8Direction)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	27 97       	sbiw	r28, 0x07	; 7
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	6a 83       	std	Y+2, r22	; 0x02
    208a:	4b 83       	std	Y+3, r20	; 0x03
	if(A_u8Direction == DIO_PIN_OUTPUT){
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	09 f0       	breq	.+2      	; 0x2094 <DIO_vWritePinDirection+0x22>
    2092:	6f c0       	rjmp	.+222    	; 0x2172 <DIO_vWritePinDirection+0x100>
		switch (A_u8PortID)
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	3f 83       	std	Y+7, r19	; 0x07
    209c:	2e 83       	std	Y+6, r18	; 0x06
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	49 f1       	breq	.+82     	; 0x20fa <DIO_vWritePinDirection+0x88>
    20a8:	2e 81       	ldd	r18, Y+6	; 0x06
    20aa:	3f 81       	ldd	r19, Y+7	; 0x07
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	2c f4       	brge	.+10     	; 0x20bc <DIO_vWritePinDirection+0x4a>
    20b2:	8e 81       	ldd	r24, Y+6	; 0x06
    20b4:	9f 81       	ldd	r25, Y+7	; 0x07
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <DIO_vWritePinDirection+0x60>
    20ba:	d2 c0       	rjmp	.+420    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
    20bc:	2e 81       	ldd	r18, Y+6	; 0x06
    20be:	3f 81       	ldd	r19, Y+7	; 0x07
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	71 f1       	breq	.+92     	; 0x2122 <DIO_vWritePinDirection+0xb0>
    20c6:	8e 81       	ldd	r24, Y+6	; 0x06
    20c8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	e9 f1       	breq	.+122    	; 0x214a <DIO_vWritePinDirection+0xd8>
    20d0:	c7 c0       	rjmp	.+398    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
		{
			case DIO_PORTA:
				SET_BIT(DDRA,A_u8PinNo);
    20d2:	aa e3       	ldi	r26, 0x3A	; 58
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ea e3       	ldi	r30, 0x3A	; 58
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_vWritePinDirection+0x7e>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <DIO_vWritePinDirection+0x7a>
    20f4:	84 2b       	or	r24, r20
    20f6:	8c 93       	st	X, r24
    20f8:	b3 c0       	rjmp	.+358    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTB:
				SET_BIT(DDRB,A_u8PinNo);
    20fa:	a7 e3       	ldi	r26, 0x37	; 55
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e7 e3       	ldi	r30, 0x37	; 55
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	48 2f       	mov	r20, r24
    2106:	8a 81       	ldd	r24, Y+2	; 0x02
    2108:	28 2f       	mov	r18, r24
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	02 2e       	mov	r0, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <DIO_vWritePinDirection+0xa6>
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	0a 94       	dec	r0
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <DIO_vWritePinDirection+0xa2>
    211c:	84 2b       	or	r24, r20
    211e:	8c 93       	st	X, r24
    2120:	9f c0       	rjmp	.+318    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTC:
				SET_BIT(DDRC,A_u8PinNo);
    2122:	a4 e3       	ldi	r26, 0x34	; 52
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e4 e3       	ldi	r30, 0x34	; 52
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <DIO_vWritePinDirection+0xce>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <DIO_vWritePinDirection+0xca>
    2144:	84 2b       	or	r24, r20
    2146:	8c 93       	st	X, r24
    2148:	8b c0       	rjmp	.+278    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTD:
				SET_BIT(DDRD,A_u8PinNo);
    214a:	a1 e3       	ldi	r26, 0x31	; 49
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e1 e3       	ldi	r30, 0x31	; 49
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	48 2f       	mov	r20, r24
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	02 2e       	mov	r0, r18
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <DIO_vWritePinDirection+0xf6>
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <DIO_vWritePinDirection+0xf2>
    216c:	84 2b       	or	r24, r20
    216e:	8c 93       	st	X, r24
    2170:	77 c0       	rjmp	.+238    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
		}
	}
	else if (A_u8Direction == DIO_PIN_INPUT){
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	88 23       	and	r24, r24
    2176:	09 f0       	breq	.+2      	; 0x217a <DIO_vWritePinDirection+0x108>
    2178:	73 c0       	rjmp	.+230    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
		switch (A_u8PortID)
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3d 83       	std	Y+5, r19	; 0x05
    2182:	2c 83       	std	Y+4, r18	; 0x04
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	9d 81       	ldd	r25, Y+5	; 0x05
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	91 05       	cpc	r25, r1
    218c:	59 f1       	breq	.+86     	; 0x21e4 <DIO_vWritePinDirection+0x172>
    218e:	2c 81       	ldd	r18, Y+4	; 0x04
    2190:	3d 81       	ldd	r19, Y+5	; 0x05
    2192:	22 30       	cpi	r18, 0x02	; 2
    2194:	31 05       	cpc	r19, r1
    2196:	2c f4       	brge	.+10     	; 0x21a2 <DIO_vWritePinDirection+0x130>
    2198:	8c 81       	ldd	r24, Y+4	; 0x04
    219a:	9d 81       	ldd	r25, Y+5	; 0x05
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	69 f0       	breq	.+26     	; 0x21ba <DIO_vWritePinDirection+0x148>
    21a0:	5f c0       	rjmp	.+190    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
    21a2:	2c 81       	ldd	r18, Y+4	; 0x04
    21a4:	3d 81       	ldd	r19, Y+5	; 0x05
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	31 05       	cpc	r19, r1
    21aa:	89 f1       	breq	.+98     	; 0x220e <DIO_vWritePinDirection+0x19c>
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	9d 81       	ldd	r25, Y+5	; 0x05
    21b0:	83 30       	cpi	r24, 0x03	; 3
    21b2:	91 05       	cpc	r25, r1
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <DIO_vWritePinDirection+0x146>
    21b6:	40 c0       	rjmp	.+128    	; 0x2238 <DIO_vWritePinDirection+0x1c6>
    21b8:	53 c0       	rjmp	.+166    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
		{
		case DIO_PORTA:
				CLR_BIT(DDRA,A_u8PinNo);
    21ba:	aa e3       	ldi	r26, 0x3A	; 58
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ea e3       	ldi	r30, 0x3A	; 58
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <DIO_vWritePinDirection+0x166>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <DIO_vWritePinDirection+0x162>
    21dc:	80 95       	com	r24
    21de:	84 23       	and	r24, r20
    21e0:	8c 93       	st	X, r24
    21e2:	3e c0       	rjmp	.+124    	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTB:
				CLR_BIT(DDRB,A_u8PinNo);
    21e4:	a7 e3       	ldi	r26, 0x37	; 55
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e7 e3       	ldi	r30, 0x37	; 55
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	48 2f       	mov	r20, r24
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	28 2f       	mov	r18, r24
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	02 2e       	mov	r0, r18
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <DIO_vWritePinDirection+0x190>
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	0a 94       	dec	r0
    2204:	e2 f7       	brpl	.-8      	; 0x21fe <DIO_vWritePinDirection+0x18c>
    2206:	80 95       	com	r24
    2208:	84 23       	and	r24, r20
    220a:	8c 93       	st	X, r24
    220c:	29 c0       	rjmp	.+82     	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTC:
				CLR_BIT(DDRC,A_u8PinNo);
    220e:	a4 e3       	ldi	r26, 0x34	; 52
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e4 e3       	ldi	r30, 0x34	; 52
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	48 2f       	mov	r20, r24
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	02 2e       	mov	r0, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <DIO_vWritePinDirection+0x1ba>
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0a 94       	dec	r0
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <DIO_vWritePinDirection+0x1b6>
    2230:	80 95       	com	r24
    2232:	84 23       	and	r24, r20
    2234:	8c 93       	st	X, r24
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <DIO_vWritePinDirection+0x1ee>
			break;
			case DIO_PORTD:
				CLR_BIT(DDRD,A_u8PinNo);
    2238:	a1 e3       	ldi	r26, 0x31	; 49
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e1 e3       	ldi	r30, 0x31	; 49
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	48 2f       	mov	r20, r24
    2244:	8a 81       	ldd	r24, Y+2	; 0x02
    2246:	28 2f       	mov	r18, r24
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	02 2e       	mov	r0, r18
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_vWritePinDirection+0x1e4>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	0a 94       	dec	r0
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_vWritePinDirection+0x1e0>
    225a:	80 95       	com	r24
    225c:	84 23       	and	r24, r20
    225e:	8c 93       	st	X, r24
			break;
		}
	}
}
    2260:	27 96       	adiw	r28, 0x07	; 7
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <DIO_vWritePinVAlue>:
void DIO_vWritePinVAlue(u8 A_u8PortID, u8 A_u8PinNo , u8 A_u8Value)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	27 97       	sbiw	r28, 0x07	; 7
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	6a 83       	std	Y+2, r22	; 0x02
    228a:	4b 83       	std	Y+3, r20	; 0x03
	{
		if(A_u8Value == DIO_PIN_HIGH){
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	09 f0       	breq	.+2      	; 0x2294 <DIO_vWritePinVAlue+0x22>
    2292:	6f c0       	rjmp	.+222    	; 0x2372 <DIO_vWritePinVAlue+0x100>
			switch (A_u8PortID)
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	3f 83       	std	Y+7, r19	; 0x07
    229c:	2e 83       	std	Y+6, r18	; 0x06
    229e:	8e 81       	ldd	r24, Y+6	; 0x06
    22a0:	9f 81       	ldd	r25, Y+7	; 0x07
    22a2:	81 30       	cpi	r24, 0x01	; 1
    22a4:	91 05       	cpc	r25, r1
    22a6:	49 f1       	breq	.+82     	; 0x22fa <DIO_vWritePinVAlue+0x88>
    22a8:	2e 81       	ldd	r18, Y+6	; 0x06
    22aa:	3f 81       	ldd	r19, Y+7	; 0x07
    22ac:	22 30       	cpi	r18, 0x02	; 2
    22ae:	31 05       	cpc	r19, r1
    22b0:	2c f4       	brge	.+10     	; 0x22bc <DIO_vWritePinVAlue+0x4a>
    22b2:	8e 81       	ldd	r24, Y+6	; 0x06
    22b4:	9f 81       	ldd	r25, Y+7	; 0x07
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	61 f0       	breq	.+24     	; 0x22d2 <DIO_vWritePinVAlue+0x60>
    22ba:	d2 c0       	rjmp	.+420    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
    22bc:	2e 81       	ldd	r18, Y+6	; 0x06
    22be:	3f 81       	ldd	r19, Y+7	; 0x07
    22c0:	22 30       	cpi	r18, 0x02	; 2
    22c2:	31 05       	cpc	r19, r1
    22c4:	71 f1       	breq	.+92     	; 0x2322 <DIO_vWritePinVAlue+0xb0>
    22c6:	8e 81       	ldd	r24, Y+6	; 0x06
    22c8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	e9 f1       	breq	.+122    	; 0x234a <DIO_vWritePinVAlue+0xd8>
    22d0:	c7 c0       	rjmp	.+398    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
			{
				case DIO_PORTA:
					SET_BIT(PORTA,A_u8PinNo);
    22d2:	ab e3       	ldi	r26, 0x3B	; 59
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	eb e3       	ldi	r30, 0x3B	; 59
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <DIO_vWritePinVAlue+0x7e>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <DIO_vWritePinVAlue+0x7a>
    22f4:	84 2b       	or	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	b3 c0       	rjmp	.+358    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTB:
					SET_BIT(PORTB,A_u8PinNo);
    22fa:	a8 e3       	ldi	r26, 0x38	; 56
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <DIO_vWritePinVAlue+0xa6>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <DIO_vWritePinVAlue+0xa2>
    231c:	84 2b       	or	r24, r20
    231e:	8c 93       	st	X, r24
    2320:	9f c0       	rjmp	.+318    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTC:
					SET_BIT(PORTC,A_u8PinNo);
    2322:	a5 e3       	ldi	r26, 0x35	; 53
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e5 e3       	ldi	r30, 0x35	; 53
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	48 2f       	mov	r20, r24
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 2e       	mov	r0, r18
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DIO_vWritePinVAlue+0xce>
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DIO_vWritePinVAlue+0xca>
    2344:	84 2b       	or	r24, r20
    2346:	8c 93       	st	X, r24
    2348:	8b c0       	rjmp	.+278    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTD:
					SET_BIT(PORTD,A_u8PinNo);
    234a:	a2 e3       	ldi	r26, 0x32	; 50
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e2 e3       	ldi	r30, 0x32	; 50
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_vWritePinVAlue+0xf6>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_vWritePinVAlue+0xf2>
    236c:	84 2b       	or	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	77 c0       	rjmp	.+238    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
			}
		}
		else if (A_u8Value == DIO_PIN_LOW){
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	88 23       	and	r24, r24
    2376:	09 f0       	breq	.+2      	; 0x237a <DIO_vWritePinVAlue+0x108>
    2378:	73 c0       	rjmp	.+230    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
			switch (A_u8PortID)
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3d 83       	std	Y+5, r19	; 0x05
    2382:	2c 83       	std	Y+4, r18	; 0x04
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	59 f1       	breq	.+86     	; 0x23e4 <DIO_vWritePinVAlue+0x172>
    238e:	2c 81       	ldd	r18, Y+4	; 0x04
    2390:	3d 81       	ldd	r19, Y+5	; 0x05
    2392:	22 30       	cpi	r18, 0x02	; 2
    2394:	31 05       	cpc	r19, r1
    2396:	2c f4       	brge	.+10     	; 0x23a2 <DIO_vWritePinVAlue+0x130>
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	69 f0       	breq	.+26     	; 0x23ba <DIO_vWritePinVAlue+0x148>
    23a0:	5f c0       	rjmp	.+190    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
    23a2:	2c 81       	ldd	r18, Y+4	; 0x04
    23a4:	3d 81       	ldd	r19, Y+5	; 0x05
    23a6:	22 30       	cpi	r18, 0x02	; 2
    23a8:	31 05       	cpc	r19, r1
    23aa:	89 f1       	breq	.+98     	; 0x240e <DIO_vWritePinVAlue+0x19c>
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	9d 81       	ldd	r25, Y+5	; 0x05
    23b0:	83 30       	cpi	r24, 0x03	; 3
    23b2:	91 05       	cpc	r25, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <DIO_vWritePinVAlue+0x146>
    23b6:	40 c0       	rjmp	.+128    	; 0x2438 <DIO_vWritePinVAlue+0x1c6>
    23b8:	53 c0       	rjmp	.+166    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
			{
			case DIO_PORTA:
					CLR_BIT(PORTA,A_u8PinNo);
    23ba:	ab e3       	ldi	r26, 0x3B	; 59
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	eb e3       	ldi	r30, 0x3B	; 59
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_vWritePinVAlue+0x166>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <DIO_vWritePinVAlue+0x162>
    23dc:	80 95       	com	r24
    23de:	84 23       	and	r24, r20
    23e0:	8c 93       	st	X, r24
    23e2:	3e c0       	rjmp	.+124    	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTB:
					CLR_BIT(PORTB,A_u8PinNo);
    23e4:	a8 e3       	ldi	r26, 0x38	; 56
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e8 e3       	ldi	r30, 0x38	; 56
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <DIO_vWritePinVAlue+0x190>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <DIO_vWritePinVAlue+0x18c>
    2406:	80 95       	com	r24
    2408:	84 23       	and	r24, r20
    240a:	8c 93       	st	X, r24
    240c:	29 c0       	rjmp	.+82     	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTC:
					CLR_BIT(PORTC,A_u8PinNo);
    240e:	a5 e3       	ldi	r26, 0x35	; 53
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e5 e3       	ldi	r30, 0x35	; 53
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	48 2f       	mov	r20, r24
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	02 2e       	mov	r0, r18
    2426:	02 c0       	rjmp	.+4      	; 0x242c <DIO_vWritePinVAlue+0x1ba>
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	0a 94       	dec	r0
    242e:	e2 f7       	brpl	.-8      	; 0x2428 <DIO_vWritePinVAlue+0x1b6>
    2430:	80 95       	com	r24
    2432:	84 23       	and	r24, r20
    2434:	8c 93       	st	X, r24
    2436:	14 c0       	rjmp	.+40     	; 0x2460 <DIO_vWritePinVAlue+0x1ee>
				break;
				case DIO_PORTD:
					CLR_BIT(PORTD,A_u8PinNo);
    2438:	a2 e3       	ldi	r26, 0x32	; 50
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e2 e3       	ldi	r30, 0x32	; 50
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	48 2f       	mov	r20, r24
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 2e       	mov	r0, r18
    2450:	02 c0       	rjmp	.+4      	; 0x2456 <DIO_vWritePinVAlue+0x1e4>
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	0a 94       	dec	r0
    2458:	e2 f7       	brpl	.-8      	; 0x2452 <DIO_vWritePinVAlue+0x1e0>
    245a:	80 95       	com	r24
    245c:	84 23       	and	r24, r20
    245e:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    2460:	27 96       	adiw	r28, 0x07	; 7
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <DIO_u8ReadPinVAlue>:
u8 DIO_u8ReadPinVAlue(u8 A_u8PortID, u8 A_u8PinNo )   //also you can use output parameter instead of return value
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <DIO_u8ReadPinVAlue+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <DIO_u8ReadPinVAlue+0x8>
    247a:	0f 92       	push	r0
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
    2480:	8a 83       	std	Y+2, r24	; 0x02
    2482:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinValue=0;
    2484:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortID)
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	28 2f       	mov	r18, r24
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	3d 83       	std	Y+5, r19	; 0x05
    248e:	2c 83       	std	Y+4, r18	; 0x04
    2490:	4c 81       	ldd	r20, Y+4	; 0x04
    2492:	5d 81       	ldd	r21, Y+5	; 0x05
    2494:	41 30       	cpi	r20, 0x01	; 1
    2496:	51 05       	cpc	r21, r1
    2498:	41 f1       	breq	.+80     	; 0x24ea <DIO_u8ReadPinVAlue+0x78>
    249a:	8c 81       	ldd	r24, Y+4	; 0x04
    249c:	9d 81       	ldd	r25, Y+5	; 0x05
    249e:	82 30       	cpi	r24, 0x02	; 2
    24a0:	91 05       	cpc	r25, r1
    24a2:	34 f4       	brge	.+12     	; 0x24b0 <DIO_u8ReadPinVAlue+0x3e>
    24a4:	2c 81       	ldd	r18, Y+4	; 0x04
    24a6:	3d 81       	ldd	r19, Y+5	; 0x05
    24a8:	21 15       	cp	r18, r1
    24aa:	31 05       	cpc	r19, r1
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <DIO_u8ReadPinVAlue+0x54>
    24ae:	52 c0       	rjmp	.+164    	; 0x2554 <DIO_u8ReadPinVAlue+0xe2>
    24b0:	4c 81       	ldd	r20, Y+4	; 0x04
    24b2:	5d 81       	ldd	r21, Y+5	; 0x05
    24b4:	42 30       	cpi	r20, 0x02	; 2
    24b6:	51 05       	cpc	r21, r1
    24b8:	51 f1       	breq	.+84     	; 0x250e <DIO_u8ReadPinVAlue+0x9c>
    24ba:	8c 81       	ldd	r24, Y+4	; 0x04
    24bc:	9d 81       	ldd	r25, Y+5	; 0x05
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	91 05       	cpc	r25, r1
    24c2:	b9 f1       	breq	.+110    	; 0x2532 <DIO_u8ReadPinVAlue+0xc0>
    24c4:	47 c0       	rjmp	.+142    	; 0x2554 <DIO_u8ReadPinVAlue+0xe2>
		{
		case DIO_PORTA : L_u8PinValue= GET_BIT(PINA , A_u8PinNo); break;
    24c6:	e9 e3       	ldi	r30, 0x39	; 57
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	88 2f       	mov	r24, r24
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	a9 01       	movw	r20, r18
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <DIO_u8ReadPinVAlue+0x6c>
    24da:	55 95       	asr	r21
    24dc:	47 95       	ror	r20
    24de:	8a 95       	dec	r24
    24e0:	e2 f7       	brpl	.-8      	; 0x24da <DIO_u8ReadPinVAlue+0x68>
    24e2:	ca 01       	movw	r24, r20
    24e4:	81 70       	andi	r24, 0x01	; 1
    24e6:	89 83       	std	Y+1, r24	; 0x01
    24e8:	35 c0       	rjmp	.+106    	; 0x2554 <DIO_u8ReadPinVAlue+0xe2>
		case DIO_PORTB : L_u8PinValue= GET_BIT(PINB , A_u8PinNo); break;
    24ea:	e6 e3       	ldi	r30, 0x36	; 54
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a9 01       	movw	r20, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <DIO_u8ReadPinVAlue+0x90>
    24fe:	55 95       	asr	r21
    2500:	47 95       	ror	r20
    2502:	8a 95       	dec	r24
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <DIO_u8ReadPinVAlue+0x8c>
    2506:	ca 01       	movw	r24, r20
    2508:	81 70       	andi	r24, 0x01	; 1
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	23 c0       	rjmp	.+70     	; 0x2554 <DIO_u8ReadPinVAlue+0xe2>
		case DIO_PORTC : L_u8PinValue= GET_BIT(PINC , A_u8PinNo); break;
    250e:	e3 e3       	ldi	r30, 0x33	; 51
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	88 2f       	mov	r24, r24
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a9 01       	movw	r20, r18
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <DIO_u8ReadPinVAlue+0xb4>
    2522:	55 95       	asr	r21
    2524:	47 95       	ror	r20
    2526:	8a 95       	dec	r24
    2528:	e2 f7       	brpl	.-8      	; 0x2522 <DIO_u8ReadPinVAlue+0xb0>
    252a:	ca 01       	movw	r24, r20
    252c:	81 70       	andi	r24, 0x01	; 1
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	11 c0       	rjmp	.+34     	; 0x2554 <DIO_u8ReadPinVAlue+0xe2>
		case DIO_PORTD : L_u8PinValue= GET_BIT(PIND , A_u8PinNo); break;
    2532:	e0 e3       	ldi	r30, 0x30	; 48
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a9 01       	movw	r20, r18
    2544:	02 c0       	rjmp	.+4      	; 0x254a <DIO_u8ReadPinVAlue+0xd8>
    2546:	55 95       	asr	r21
    2548:	47 95       	ror	r20
    254a:	8a 95       	dec	r24
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <DIO_u8ReadPinVAlue+0xd4>
    254e:	ca 01       	movw	r24, r20
    2550:	81 70       	andi	r24, 0x01	; 1
    2552:	89 83       	std	Y+1, r24	; 0x01

		}
	return L_u8PinValue;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <DIO_vTogglePinValue>:
void DIO_vTogglePinValue(u8 A_u8PortID, u8 A_u8PinNo)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <DIO_vTogglePinValue+0x6>
    256c:	00 d0       	rcall	.+0      	; 0x256e <DIO_vTogglePinValue+0x8>
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortID)
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3c 83       	std	Y+4, r19	; 0x04
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	49 f1       	breq	.+82     	; 0x25dc <DIO_vTogglePinValue+0x76>
    258a:	2b 81       	ldd	r18, Y+3	; 0x03
    258c:	3c 81       	ldd	r19, Y+4	; 0x04
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <DIO_vTogglePinValue+0x38>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <DIO_vTogglePinValue+0x4e>
    259c:	5a c0       	rjmp	.+180    	; 0x2652 <DIO_vTogglePinValue+0xec>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	71 f1       	breq	.+92     	; 0x2604 <DIO_vTogglePinValue+0x9e>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	e9 f1       	breq	.+122    	; 0x262c <DIO_vTogglePinValue+0xc6>
    25b2:	4f c0       	rjmp	.+158    	; 0x2652 <DIO_vTogglePinValue+0xec>
		{
		case DIO_PORTA : TOG_BIT(PORTA , A_u8PinNo); break;
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	48 2f       	mov	r20, r24
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	02 2e       	mov	r0, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <DIO_vTogglePinValue+0x6c>
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	0a 94       	dec	r0
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <DIO_vTogglePinValue+0x68>
    25d6:	84 27       	eor	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	3b c0       	rjmp	.+118    	; 0x2652 <DIO_vTogglePinValue+0xec>
		case DIO_PORTB : TOG_BIT(PORTB , A_u8PinNo); break;
    25dc:	a8 e3       	ldi	r26, 0x38	; 56
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e8 e3       	ldi	r30, 0x38	; 56
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	48 2f       	mov	r20, r24
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	02 2e       	mov	r0, r18
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <DIO_vTogglePinValue+0x94>
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	0a 94       	dec	r0
    25fc:	e2 f7       	brpl	.-8      	; 0x25f6 <DIO_vTogglePinValue+0x90>
    25fe:	84 27       	eor	r24, r20
    2600:	8c 93       	st	X, r24
    2602:	27 c0       	rjmp	.+78     	; 0x2652 <DIO_vTogglePinValue+0xec>
		case DIO_PORTC : TOG_BIT(PORTC , A_u8PinNo); break;
    2604:	a5 e3       	ldi	r26, 0x35	; 53
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e5 e3       	ldi	r30, 0x35	; 53
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	48 2f       	mov	r20, r24
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	02 2e       	mov	r0, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <DIO_vTogglePinValue+0xbc>
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	0a 94       	dec	r0
    2624:	e2 f7       	brpl	.-8      	; 0x261e <DIO_vTogglePinValue+0xb8>
    2626:	84 27       	eor	r24, r20
    2628:	8c 93       	st	X, r24
    262a:	13 c0       	rjmp	.+38     	; 0x2652 <DIO_vTogglePinValue+0xec>
		case DIO_PORTD : TOG_BIT(PORTD , A_u8PinNo); break;
    262c:	a2 e3       	ldi	r26, 0x32	; 50
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e2 e3       	ldi	r30, 0x32	; 50
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	48 2f       	mov	r20, r24
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	02 2e       	mov	r0, r18
    2644:	02 c0       	rjmp	.+4      	; 0x264a <DIO_vTogglePinValue+0xe4>
    2646:	88 0f       	add	r24, r24
    2648:	99 1f       	adc	r25, r25
    264a:	0a 94       	dec	r0
    264c:	e2 f7       	brpl	.-8      	; 0x2646 <DIO_vTogglePinValue+0xe0>
    264e:	84 27       	eor	r24, r20
    2650:	8c 93       	st	X, r24

		}
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <DIO_vWritePortDirection>:

void DIO_vWritePortDirection(u8 A_u8PortID, u8 A_u8Direction)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <DIO_vWritePortDirection+0x6>
    2666:	00 d0       	rcall	.+0      	; 0x2668 <DIO_vWritePortDirection+0x8>
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortID)
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	3c 83       	std	Y+4, r19	; 0x04
    2678:	2b 83       	std	Y+3, r18	; 0x03
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	81 30       	cpi	r24, 0x01	; 1
    2680:	91 05       	cpc	r25, r1
    2682:	d1 f0       	breq	.+52     	; 0x26b8 <DIO_vWritePortDirection+0x58>
    2684:	2b 81       	ldd	r18, Y+3	; 0x03
    2686:	3c 81       	ldd	r19, Y+4	; 0x04
    2688:	22 30       	cpi	r18, 0x02	; 2
    268a:	31 05       	cpc	r19, r1
    268c:	2c f4       	brge	.+10     	; 0x2698 <DIO_vWritePortDirection+0x38>
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	61 f0       	breq	.+24     	; 0x26ae <DIO_vWritePortDirection+0x4e>
    2696:	1e c0       	rjmp	.+60     	; 0x26d4 <DIO_vWritePortDirection+0x74>
    2698:	2b 81       	ldd	r18, Y+3	; 0x03
    269a:	3c 81       	ldd	r19, Y+4	; 0x04
    269c:	22 30       	cpi	r18, 0x02	; 2
    269e:	31 05       	cpc	r19, r1
    26a0:	81 f0       	breq	.+32     	; 0x26c2 <DIO_vWritePortDirection+0x62>
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	83 30       	cpi	r24, 0x03	; 3
    26a8:	91 05       	cpc	r25, r1
    26aa:	81 f0       	breq	.+32     	; 0x26cc <DIO_vWritePortDirection+0x6c>
    26ac:	13 c0       	rjmp	.+38     	; 0x26d4 <DIO_vWritePortDirection+0x74>
		{
		case DIO_PORTA : DDRA=A_u8Direction; break;
    26ae:	ea e3       	ldi	r30, 0x3A	; 58
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	80 83       	st	Z, r24
    26b6:	0e c0       	rjmp	.+28     	; 0x26d4 <DIO_vWritePortDirection+0x74>
		case DIO_PORTB : DDRB=A_u8Direction; break;
    26b8:	e7 e3       	ldi	r30, 0x37	; 55
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	80 83       	st	Z, r24
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <DIO_vWritePortDirection+0x74>
		case DIO_PORTC : DDRC=A_u8Direction; break;
    26c2:	e4 e3       	ldi	r30, 0x34	; 52
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	80 83       	st	Z, r24
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <DIO_vWritePortDirection+0x74>
		case DIO_PORTD : DDRD=A_u8Direction; break;
    26cc:	e1 e3       	ldi	r30, 0x31	; 49
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	80 83       	st	Z, r24

		}
}
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <DIO_vWritePortVAlue>:
void DIO_vWritePortVAlue(u8 A_u8PortID,u8 A_u8Value)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <DIO_vWritePortVAlue+0x6>
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <DIO_vWritePortVAlue+0x8>
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortID)
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3c 83       	std	Y+4, r19	; 0x04
    26fa:	2b 83       	std	Y+3, r18	; 0x03
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	91 05       	cpc	r25, r1
    2704:	d1 f0       	breq	.+52     	; 0x273a <DIO_vWritePortVAlue+0x58>
    2706:	2b 81       	ldd	r18, Y+3	; 0x03
    2708:	3c 81       	ldd	r19, Y+4	; 0x04
    270a:	22 30       	cpi	r18, 0x02	; 2
    270c:	31 05       	cpc	r19, r1
    270e:	2c f4       	brge	.+10     	; 0x271a <DIO_vWritePortVAlue+0x38>
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	9c 81       	ldd	r25, Y+4	; 0x04
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	61 f0       	breq	.+24     	; 0x2730 <DIO_vWritePortVAlue+0x4e>
    2718:	1e c0       	rjmp	.+60     	; 0x2756 <DIO_vWritePortVAlue+0x74>
    271a:	2b 81       	ldd	r18, Y+3	; 0x03
    271c:	3c 81       	ldd	r19, Y+4	; 0x04
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	31 05       	cpc	r19, r1
    2722:	81 f0       	breq	.+32     	; 0x2744 <DIO_vWritePortVAlue+0x62>
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	83 30       	cpi	r24, 0x03	; 3
    272a:	91 05       	cpc	r25, r1
    272c:	81 f0       	breq	.+32     	; 0x274e <DIO_vWritePortVAlue+0x6c>
    272e:	13 c0       	rjmp	.+38     	; 0x2756 <DIO_vWritePortVAlue+0x74>
		{
		case DIO_PORTA : PORTA=A_u8Value; break;
    2730:	eb e3       	ldi	r30, 0x3B	; 59
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	80 83       	st	Z, r24
    2738:	0e c0       	rjmp	.+28     	; 0x2756 <DIO_vWritePortVAlue+0x74>
		case DIO_PORTB : PORTB=A_u8Value; break;
    273a:	e8 e3       	ldi	r30, 0x38	; 56
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	8a 81       	ldd	r24, Y+2	; 0x02
    2740:	80 83       	st	Z, r24
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <DIO_vWritePortVAlue+0x74>
		case DIO_PORTC : PORTC=A_u8Value; break;
    2744:	e5 e3       	ldi	r30, 0x35	; 53
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	80 83       	st	Z, r24
    274c:	04 c0       	rjmp	.+8      	; 0x2756 <DIO_vWritePortVAlue+0x74>
		case DIO_PORTD : PORTD=A_u8Value; break;
    274e:	e2 e3       	ldi	r30, 0x32	; 50
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	80 83       	st	Z, r24

		}
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <DIO_u8ReadPortVAlue>:
u8 DIO_u8ReadPortVAlue(u8 A_u8PortID)
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <DIO_u8ReadPortVAlue+0x6>
    276a:	00 d0       	rcall	.+0      	; 0x276c <DIO_u8ReadPortVAlue+0x8>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortValue=0;
    2772:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortID)
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	3c 83       	std	Y+4, r19	; 0x04
    277c:	2b 83       	std	Y+3, r18	; 0x03
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	91 05       	cpc	r25, r1
    2786:	d1 f0       	breq	.+52     	; 0x27bc <DIO_u8ReadPortVAlue+0x58>
    2788:	2b 81       	ldd	r18, Y+3	; 0x03
    278a:	3c 81       	ldd	r19, Y+4	; 0x04
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	31 05       	cpc	r19, r1
    2790:	2c f4       	brge	.+10     	; 0x279c <DIO_u8ReadPortVAlue+0x38>
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	61 f0       	breq	.+24     	; 0x27b2 <DIO_u8ReadPortVAlue+0x4e>
    279a:	1e c0       	rjmp	.+60     	; 0x27d8 <DIO_u8ReadPortVAlue+0x74>
    279c:	2b 81       	ldd	r18, Y+3	; 0x03
    279e:	3c 81       	ldd	r19, Y+4	; 0x04
    27a0:	22 30       	cpi	r18, 0x02	; 2
    27a2:	31 05       	cpc	r19, r1
    27a4:	81 f0       	breq	.+32     	; 0x27c6 <DIO_u8ReadPortVAlue+0x62>
    27a6:	8b 81       	ldd	r24, Y+3	; 0x03
    27a8:	9c 81       	ldd	r25, Y+4	; 0x04
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	91 05       	cpc	r25, r1
    27ae:	81 f0       	breq	.+32     	; 0x27d0 <DIO_u8ReadPortVAlue+0x6c>
    27b0:	13 c0       	rjmp	.+38     	; 0x27d8 <DIO_u8ReadPortVAlue+0x74>
		{
		case DIO_PORTA : L_u8PortValue=PINA; break;
    27b2:	e9 e3       	ldi	r30, 0x39	; 57
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	0e c0       	rjmp	.+28     	; 0x27d8 <DIO_u8ReadPortVAlue+0x74>
		case DIO_PORTB : L_u8PortValue=PINB; break;
    27bc:	e6 e3       	ldi	r30, 0x36	; 54
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <DIO_u8ReadPortVAlue+0x74>
		case DIO_PORTC : L_u8PortValue=PINC; break;
    27c6:	e3 e3       	ldi	r30, 0x33	; 51
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <DIO_u8ReadPortVAlue+0x74>
		case DIO_PORTD : L_u8PortValue=PIND; break;
    27d0:	e0 e3       	ldi	r30, 0x30	; 48
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	89 83       	std	Y+1, r24	; 0x01

		}
	return L_u8PortValue;
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <ADC_vInit>:


static void (* G_ADC16_CallBack)(void);

void ADC_vInit (void)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	/*1-select reference bits ADLAR */
	ADMUX=((ADMUX & ~(0b11<<REFS0))|(ADC_VREF<<REFS0));
    27f0:	a7 e2       	ldi	r26, 0x27	; 39
    27f2:	b0 e0       	ldi	r27, 0x00	; 0
    27f4:	e7 e2       	ldi	r30, 0x27	; 39
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	8f 73       	andi	r24, 0x3F	; 63
    27fc:	80 64       	ori	r24, 0x40	; 64
    27fe:	8c 93       	st	X, r24

	/*2- select data adjustment*/
	CLR_BIT(ADMUX,ADLAR);//right adjustment
    2800:	a7 e2       	ldi	r26, 0x27	; 39
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e7 e2       	ldi	r30, 0x27	; 39
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8f 7d       	andi	r24, 0xDF	; 223
    280c:	8c 93       	st	X, r24
	/*3-ADC enable*/
	SET_BIT(ADCSRA,ADEN);
    280e:	a6 e2       	ldi	r26, 0x26	; 38
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e6 e2       	ldi	r30, 0x26	; 38
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	8c 93       	st	X, r24
	/*4- auto trigger disable*/
	CLR_BIT(ADCSRA,ADATE);
    281c:	a6 e2       	ldi	r26, 0x26	; 38
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e6 e2       	ldi	r30, 0x26	; 38
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	8f 7d       	andi	r24, 0xDF	; 223
    2828:	8c 93       	st	X, r24
	/*4-a- select auto trigger source*/

	/*5- interrupt DISABLE*/
	CLR_BIT(ADCSRA,ADIE);
    282a:	a6 e2       	ldi	r26, 0x26	; 38
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e6 e2       	ldi	r30, 0x26	; 38
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	87 7f       	andi	r24, 0xF7	; 247
    2836:	8c 93       	st	X, r24
	/*6- conversion clock enable*/  //speed of conversion
	ADCSRA &= ~(0b111);
    2838:	a6 e2       	ldi	r26, 0x26	; 38
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e6 e2       	ldi	r30, 0x26	; 38
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 7f       	andi	r24, 0xF8	; 248
    2844:	8c 93       	st	X, r24
	ADCSRA |= (ADC_CLK_SELEC);
    2846:	a6 e2       	ldi	r26, 0x26	; 38
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e6 e2       	ldi	r30, 0x26	; 38
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	86 60       	ori	r24, 0x06	; 6
    2852:	8c 93       	st	X, r24

}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <ADC_vReadDigitalValue_synch>:
u16 ADC_vReadDigitalValue_synch(u8 A_u8Channel)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	89 83       	std	Y+1, r24	; 0x01
	/*1- select channel*/
	ADMUX &= ~(0b11111);
    2866:	a7 e2       	ldi	r26, 0x27	; 39
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e7 e2       	ldi	r30, 0x27	; 39
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	80 7e       	andi	r24, 0xE0	; 224
    2872:	8c 93       	st	X, r24
	ADMUX |= (A_u8Channel & CH_SELEC);//for sure that channel is from 0 to 7
    2874:	a7 e2       	ldi	r26, 0x27	; 39
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e7 e2       	ldi	r30, 0x27	; 39
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	98 2f       	mov	r25, r24
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	87 70       	andi	r24, 0x07	; 7
    2884:	89 2b       	or	r24, r25
    2886:	8c 93       	st	X, r24
	// or A_u8Channel %8
	/*2- start conversion*/
	SET_BIT(ADCSRA,ADSC);
    2888:	a6 e2       	ldi	r26, 0x26	; 38
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e6 e2       	ldi	r30, 0x26	; 38
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	80 64       	ori	r24, 0x40	; 64
    2894:	8c 93       	st	X, r24
	/*3- wait for conv. complete flag*/
	while(GET_BIT(ADCSRA,ADIF)==0);//tol m elflag m4 mrfo3 estna
    2896:	e6 e2       	ldi	r30, 0x26	; 38
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	82 95       	swap	r24
    289e:	8f 70       	andi	r24, 0x0F	; 15
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	81 70       	andi	r24, 0x01	; 1
    28a6:	90 70       	andi	r25, 0x00	; 0
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	a9 f3       	breq	.-22     	; 0x2896 <ADC_vReadDigitalValue_synch+0x3c>
	/*4- clear flag (flag is cleared by setting 1 (not 0))*/
	SET_BIT(ADCSRA,ADIF);
    28ac:	a6 e2       	ldi	r26, 0x26	; 38
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e6 e2       	ldi	r30, 0x26	; 38
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	80 61       	ori	r24, 0x10	; 16
    28b8:	8c 93       	st	X, r24
	/*5- return ADC value*/
	return /*(ADCL | ((u16)ADCH)<<8) or */ADC_DATA ;
    28ba:	e4 e2       	ldi	r30, 0x24	; 36
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	91 81       	ldd	r25, Z+1	; 0x01
}
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <ADC_vSetCallback>:

void ADC_vSetCallback (void (* fptr)(void))
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <ADC_vSetCallback+0x6>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
	G_ADC16_CallBack=fptr;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	90 93 71 00 	sts	0x0071, r25
    28e0:	80 93 70 00 	sts	0x0070, r24
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <__vector_16>:
void __vector_16 (void) __attribute__((signal)); //attribute order of elcompiler 34an tdif option llfunction (cancel optimization t2fl el global 2bl mtd5ol 34an tmn3 el nesting
void __vector_16 (void)
{
    28ee:	1f 92       	push	r1
    28f0:	0f 92       	push	r0
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	2f 93       	push	r18
    28fa:	3f 93       	push	r19
    28fc:	4f 93       	push	r20
    28fe:	5f 93       	push	r21
    2900:	6f 93       	push	r22
    2902:	7f 93       	push	r23
    2904:	8f 93       	push	r24
    2906:	9f 93       	push	r25
    2908:	af 93       	push	r26
    290a:	bf 93       	push	r27
    290c:	ef 93       	push	r30
    290e:	ff 93       	push	r31
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
	if(G_ADC16_CallBack!=NULL)
    2918:	80 91 70 00 	lds	r24, 0x0070
    291c:	90 91 71 00 	lds	r25, 0x0071
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	29 f0       	breq	.+10     	; 0x292e <__vector_16+0x40>
	{
		G_ADC16_CallBack();
    2924:	e0 91 70 00 	lds	r30, 0x0070
    2928:	f0 91 71 00 	lds	r31, 0x0071
    292c:	09 95       	icall
	}
}
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	ff 91       	pop	r31
    2934:	ef 91       	pop	r30
    2936:	bf 91       	pop	r27
    2938:	af 91       	pop	r26
    293a:	9f 91       	pop	r25
    293c:	8f 91       	pop	r24
    293e:	7f 91       	pop	r23
    2940:	6f 91       	pop	r22
    2942:	5f 91       	pop	r21
    2944:	4f 91       	pop	r20
    2946:	3f 91       	pop	r19
    2948:	2f 91       	pop	r18
    294a:	0f 90       	pop	r0
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	0f 90       	pop	r0
    2950:	1f 90       	pop	r1
    2952:	18 95       	reti

00002954 <ADC_vEnableInterrupt>:
void ADC_vEnableInterrupt(void)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    295c:	a6 e2       	ldi	r26, 0x26	; 38
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e6 e2       	ldi	r30, 0x26	; 38
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	88 60       	ori	r24, 0x08	; 8
    2968:	8c 93       	st	X, r24
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <ADC_vDisableInterrupt>:
void ADC_vDisableInterrupt(void)
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADIE);
    2978:	a6 e2       	ldi	r26, 0x26	; 38
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e6 e2       	ldi	r30, 0x26	; 38
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	87 7f       	andi	r24, 0xF7	; 247
    2984:	8c 93       	st	X, r24
}
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	08 95       	ret

0000298c <ADC_vSelectChannel>:
void ADC_vSelectChannel(u8 A_u8Channel)
{
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	00 d0       	rcall	.+0      	; 0x2992 <ADC_vSelectChannel+0x6>
    2992:	0f 92       	push	r0
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Channel)
    299a:	89 81       	ldd	r24, Y+1	; 0x01
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	3b 83       	std	Y+3, r19	; 0x03
    29a2:	2a 83       	std	Y+2, r18	; 0x02
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	9b 81       	ldd	r25, Y+3	; 0x03
    29a8:	83 30       	cpi	r24, 0x03	; 3
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <ADC_vSelectChannel+0x24>
    29ae:	60 c0       	rjmp	.+192    	; 0x2a70 <ADC_vSelectChannel+0xe4>
    29b0:	2a 81       	ldd	r18, Y+2	; 0x02
    29b2:	3b 81       	ldd	r19, Y+3	; 0x03
    29b4:	24 30       	cpi	r18, 0x04	; 4
    29b6:	31 05       	cpc	r19, r1
    29b8:	84 f4       	brge	.+32     	; 0x29da <ADC_vSelectChannel+0x4e>
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	9b 81       	ldd	r25, Y+3	; 0x03
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	91 05       	cpc	r25, r1
    29c2:	91 f1       	breq	.+100    	; 0x2a28 <ADC_vSelectChannel+0x9c>
    29c4:	2a 81       	ldd	r18, Y+2	; 0x02
    29c6:	3b 81       	ldd	r19, Y+3	; 0x03
    29c8:	22 30       	cpi	r18, 0x02	; 2
    29ca:	31 05       	cpc	r19, r1
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <ADC_vSelectChannel+0x44>
    29ce:	3e c0       	rjmp	.+124    	; 0x2a4c <ADC_vSelectChannel+0xc0>
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	9b 81       	ldd	r25, Y+3	; 0x03
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	d1 f0       	breq	.+52     	; 0x2a0c <ADC_vSelectChannel+0x80>
    29d8:	a4 c0       	rjmp	.+328    	; 0x2b22 <ADC_vSelectChannel+0x196>
    29da:	2a 81       	ldd	r18, Y+2	; 0x02
    29dc:	3b 81       	ldd	r19, Y+3	; 0x03
    29de:	25 30       	cpi	r18, 0x05	; 5
    29e0:	31 05       	cpc	r19, r1
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <ADC_vSelectChannel+0x5a>
    29e4:	69 c0       	rjmp	.+210    	; 0x2ab8 <ADC_vSelectChannel+0x12c>
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	85 30       	cpi	r24, 0x05	; 5
    29ec:	91 05       	cpc	r25, r1
    29ee:	0c f4       	brge	.+2      	; 0x29f2 <ADC_vSelectChannel+0x66>
    29f0:	51 c0       	rjmp	.+162    	; 0x2a94 <ADC_vSelectChannel+0x108>
    29f2:	2a 81       	ldd	r18, Y+2	; 0x02
    29f4:	3b 81       	ldd	r19, Y+3	; 0x03
    29f6:	26 30       	cpi	r18, 0x06	; 6
    29f8:	31 05       	cpc	r19, r1
    29fa:	09 f4       	brne	.+2      	; 0x29fe <ADC_vSelectChannel+0x72>
    29fc:	6f c0       	rjmp	.+222    	; 0x2adc <ADC_vSelectChannel+0x150>
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	87 30       	cpi	r24, 0x07	; 7
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <ADC_vSelectChannel+0x7e>
    2a08:	7b c0       	rjmp	.+246    	; 0x2b00 <ADC_vSelectChannel+0x174>
    2a0a:	8b c0       	rjmp	.+278    	; 0x2b22 <ADC_vSelectChannel+0x196>
	{
	case CH_0:
		ADMUX &= ~(0b11111);
    2a0c:	a7 e2       	ldi	r26, 0x27	; 39
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e7 e2       	ldi	r30, 0x27	; 39
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	80 7e       	andi	r24, 0xE0	; 224
    2a18:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_0);
    2a1a:	a7 e2       	ldi	r26, 0x27	; 39
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e7 e2       	ldi	r30, 0x27	; 39
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	8c 93       	st	X, r24
    2a26:	7d c0       	rjmp	.+250    	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_1:
		ADMUX &= ~(0b11111);
    2a28:	a7 e2       	ldi	r26, 0x27	; 39
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e7 e2       	ldi	r30, 0x27	; 39
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	80 7e       	andi	r24, 0xE0	; 224
    2a34:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_1);
    2a36:	a7 e2       	ldi	r26, 0x27	; 39
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e7 e2       	ldi	r30, 0x27	; 39
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	98 2f       	mov	r25, r24
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	81 70       	andi	r24, 0x01	; 1
    2a46:	89 2b       	or	r24, r25
    2a48:	8c 93       	st	X, r24
    2a4a:	6b c0       	rjmp	.+214    	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_2:
		ADMUX &= ~(0b11111);
    2a4c:	a7 e2       	ldi	r26, 0x27	; 39
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e7 e2       	ldi	r30, 0x27	; 39
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	80 7e       	andi	r24, 0xE0	; 224
    2a58:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_2);
    2a5a:	a7 e2       	ldi	r26, 0x27	; 39
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e7 e2       	ldi	r30, 0x27	; 39
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	98 2f       	mov	r25, r24
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	82 70       	andi	r24, 0x02	; 2
    2a6a:	89 2b       	or	r24, r25
    2a6c:	8c 93       	st	X, r24
    2a6e:	59 c0       	rjmp	.+178    	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_3:
		ADMUX &= ~(0b11111);
    2a70:	a7 e2       	ldi	r26, 0x27	; 39
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e7 e2       	ldi	r30, 0x27	; 39
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 7e       	andi	r24, 0xE0	; 224
    2a7c:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_3);
    2a7e:	a7 e2       	ldi	r26, 0x27	; 39
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e7 e2       	ldi	r30, 0x27	; 39
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	98 2f       	mov	r25, r24
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	83 70       	andi	r24, 0x03	; 3
    2a8e:	89 2b       	or	r24, r25
    2a90:	8c 93       	st	X, r24
    2a92:	47 c0       	rjmp	.+142    	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_4:
		ADMUX &= ~(0b11111);
    2a94:	a7 e2       	ldi	r26, 0x27	; 39
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e7 e2       	ldi	r30, 0x27	; 39
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	80 7e       	andi	r24, 0xE0	; 224
    2aa0:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_4);
    2aa2:	a7 e2       	ldi	r26, 0x27	; 39
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e7 e2       	ldi	r30, 0x27	; 39
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	98 2f       	mov	r25, r24
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	84 70       	andi	r24, 0x04	; 4
    2ab2:	89 2b       	or	r24, r25
    2ab4:	8c 93       	st	X, r24
    2ab6:	35 c0       	rjmp	.+106    	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_5:
		ADMUX &= ~(0b11111);
    2ab8:	a7 e2       	ldi	r26, 0x27	; 39
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e7 e2       	ldi	r30, 0x27	; 39
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	80 7e       	andi	r24, 0xE0	; 224
    2ac4:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_5);
    2ac6:	a7 e2       	ldi	r26, 0x27	; 39
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e7 e2       	ldi	r30, 0x27	; 39
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	85 70       	andi	r24, 0x05	; 5
    2ad6:	89 2b       	or	r24, r25
    2ad8:	8c 93       	st	X, r24
    2ada:	23 c0       	rjmp	.+70     	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_6:
		ADMUX &= ~(0b11111);
    2adc:	a7 e2       	ldi	r26, 0x27	; 39
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e7 e2       	ldi	r30, 0x27	; 39
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	80 7e       	andi	r24, 0xE0	; 224
    2ae8:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_6);
    2aea:	a7 e2       	ldi	r26, 0x27	; 39
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e7 e2       	ldi	r30, 0x27	; 39
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	98 2f       	mov	r25, r24
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	86 70       	andi	r24, 0x06	; 6
    2afa:	89 2b       	or	r24, r25
    2afc:	8c 93       	st	X, r24
    2afe:	11 c0       	rjmp	.+34     	; 0x2b22 <ADC_vSelectChannel+0x196>
		break;
	case CH_7:
		ADMUX &= ~(0b11111);
    2b00:	a7 e2       	ldi	r26, 0x27	; 39
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	e7 e2       	ldi	r30, 0x27	; 39
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	80 7e       	andi	r24, 0xE0	; 224
    2b0c:	8c 93       	st	X, r24
		ADMUX |= (A_u8Channel & CH_6);
    2b0e:	a7 e2       	ldi	r26, 0x27	; 39
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e7 e2       	ldi	r30, 0x27	; 39
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	98 2f       	mov	r25, r24
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	86 70       	andi	r24, 0x06	; 6
    2b1e:	89 2b       	or	r24, r25
    2b20:	8c 93       	st	X, r24
		break;
	}
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <ADC_vStartConversion>:
void ADC_vStartConversion(u8 A_u8Channel)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	0f 92       	push	r0
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(ADCSRA,ADSC);
    2b3a:	a6 e2       	ldi	r26, 0x26	; 38
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	e6 e2       	ldi	r30, 0x26	; 38
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	80 64       	ori	r24, 0x40	; 64
    2b46:	8c 93       	st	X, r24
}
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <ADC_vReadDigitalValue_asynch>:
u16  ADC_vReadDigitalValue_asynch(void)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62

	return ADC_DATA;
    2b58:	e4 e2       	ldi	r30, 0x24	; 36
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <main>:
 *  Created on: Oct 12, 2022
 *      Author: mahmo
 */

int main ()
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	ff cf       	rjmp	.-2      	; 0x2b6e <main+0x8>

00002b70 <__mulsi3>:
    2b70:	62 9f       	mul	r22, r18
    2b72:	d0 01       	movw	r26, r0
    2b74:	73 9f       	mul	r23, r19
    2b76:	f0 01       	movw	r30, r0
    2b78:	82 9f       	mul	r24, r18
    2b7a:	e0 0d       	add	r30, r0
    2b7c:	f1 1d       	adc	r31, r1
    2b7e:	64 9f       	mul	r22, r20
    2b80:	e0 0d       	add	r30, r0
    2b82:	f1 1d       	adc	r31, r1
    2b84:	92 9f       	mul	r25, r18
    2b86:	f0 0d       	add	r31, r0
    2b88:	83 9f       	mul	r24, r19
    2b8a:	f0 0d       	add	r31, r0
    2b8c:	74 9f       	mul	r23, r20
    2b8e:	f0 0d       	add	r31, r0
    2b90:	65 9f       	mul	r22, r21
    2b92:	f0 0d       	add	r31, r0
    2b94:	99 27       	eor	r25, r25
    2b96:	72 9f       	mul	r23, r18
    2b98:	b0 0d       	add	r27, r0
    2b9a:	e1 1d       	adc	r30, r1
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	63 9f       	mul	r22, r19
    2ba0:	b0 0d       	add	r27, r0
    2ba2:	e1 1d       	adc	r30, r1
    2ba4:	f9 1f       	adc	r31, r25
    2ba6:	bd 01       	movw	r22, r26
    2ba8:	cf 01       	movw	r24, r30
    2baa:	11 24       	eor	r1, r1
    2bac:	08 95       	ret

00002bae <__divmodsi4>:
    2bae:	97 fb       	bst	r25, 7
    2bb0:	09 2e       	mov	r0, r25
    2bb2:	05 26       	eor	r0, r21
    2bb4:	0e d0       	rcall	.+28     	; 0x2bd2 <__divmodsi4_neg1>
    2bb6:	57 fd       	sbrc	r21, 7
    2bb8:	04 d0       	rcall	.+8      	; 0x2bc2 <__divmodsi4_neg2>
    2bba:	14 d0       	rcall	.+40     	; 0x2be4 <__udivmodsi4>
    2bbc:	0a d0       	rcall	.+20     	; 0x2bd2 <__divmodsi4_neg1>
    2bbe:	00 1c       	adc	r0, r0
    2bc0:	38 f4       	brcc	.+14     	; 0x2bd0 <__divmodsi4_exit>

00002bc2 <__divmodsi4_neg2>:
    2bc2:	50 95       	com	r21
    2bc4:	40 95       	com	r20
    2bc6:	30 95       	com	r19
    2bc8:	21 95       	neg	r18
    2bca:	3f 4f       	sbci	r19, 0xFF	; 255
    2bcc:	4f 4f       	sbci	r20, 0xFF	; 255
    2bce:	5f 4f       	sbci	r21, 0xFF	; 255

00002bd0 <__divmodsi4_exit>:
    2bd0:	08 95       	ret

00002bd2 <__divmodsi4_neg1>:
    2bd2:	f6 f7       	brtc	.-4      	; 0x2bd0 <__divmodsi4_exit>
    2bd4:	90 95       	com	r25
    2bd6:	80 95       	com	r24
    2bd8:	70 95       	com	r23
    2bda:	61 95       	neg	r22
    2bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bde:	8f 4f       	sbci	r24, 0xFF	; 255
    2be0:	9f 4f       	sbci	r25, 0xFF	; 255
    2be2:	08 95       	ret

00002be4 <__udivmodsi4>:
    2be4:	a1 e2       	ldi	r26, 0x21	; 33
    2be6:	1a 2e       	mov	r1, r26
    2be8:	aa 1b       	sub	r26, r26
    2bea:	bb 1b       	sub	r27, r27
    2bec:	fd 01       	movw	r30, r26
    2bee:	0d c0       	rjmp	.+26     	; 0x2c0a <__udivmodsi4_ep>

00002bf0 <__udivmodsi4_loop>:
    2bf0:	aa 1f       	adc	r26, r26
    2bf2:	bb 1f       	adc	r27, r27
    2bf4:	ee 1f       	adc	r30, r30
    2bf6:	ff 1f       	adc	r31, r31
    2bf8:	a2 17       	cp	r26, r18
    2bfa:	b3 07       	cpc	r27, r19
    2bfc:	e4 07       	cpc	r30, r20
    2bfe:	f5 07       	cpc	r31, r21
    2c00:	20 f0       	brcs	.+8      	; 0x2c0a <__udivmodsi4_ep>
    2c02:	a2 1b       	sub	r26, r18
    2c04:	b3 0b       	sbc	r27, r19
    2c06:	e4 0b       	sbc	r30, r20
    2c08:	f5 0b       	sbc	r31, r21

00002c0a <__udivmodsi4_ep>:
    2c0a:	66 1f       	adc	r22, r22
    2c0c:	77 1f       	adc	r23, r23
    2c0e:	88 1f       	adc	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	1a 94       	dec	r1
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <__udivmodsi4_loop>
    2c16:	60 95       	com	r22
    2c18:	70 95       	com	r23
    2c1a:	80 95       	com	r24
    2c1c:	90 95       	com	r25
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	bd 01       	movw	r22, r26
    2c24:	cf 01       	movw	r24, r30
    2c26:	08 95       	ret

00002c28 <__prologue_saves__>:
    2c28:	2f 92       	push	r2
    2c2a:	3f 92       	push	r3
    2c2c:	4f 92       	push	r4
    2c2e:	5f 92       	push	r5
    2c30:	6f 92       	push	r6
    2c32:	7f 92       	push	r7
    2c34:	8f 92       	push	r8
    2c36:	9f 92       	push	r9
    2c38:	af 92       	push	r10
    2c3a:	bf 92       	push	r11
    2c3c:	cf 92       	push	r12
    2c3e:	df 92       	push	r13
    2c40:	ef 92       	push	r14
    2c42:	ff 92       	push	r15
    2c44:	0f 93       	push	r16
    2c46:	1f 93       	push	r17
    2c48:	cf 93       	push	r28
    2c4a:	df 93       	push	r29
    2c4c:	cd b7       	in	r28, 0x3d	; 61
    2c4e:	de b7       	in	r29, 0x3e	; 62
    2c50:	ca 1b       	sub	r28, r26
    2c52:	db 0b       	sbc	r29, r27
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	09 94       	ijmp

00002c60 <__epilogue_restores__>:
    2c60:	2a 88       	ldd	r2, Y+18	; 0x12
    2c62:	39 88       	ldd	r3, Y+17	; 0x11
    2c64:	48 88       	ldd	r4, Y+16	; 0x10
    2c66:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c68:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c70:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c72:	b9 84       	ldd	r11, Y+9	; 0x09
    2c74:	c8 84       	ldd	r12, Y+8	; 0x08
    2c76:	df 80       	ldd	r13, Y+7	; 0x07
    2c78:	ee 80       	ldd	r14, Y+6	; 0x06
    2c7a:	fd 80       	ldd	r15, Y+5	; 0x05
    2c7c:	0c 81       	ldd	r16, Y+4	; 0x04
    2c7e:	1b 81       	ldd	r17, Y+3	; 0x03
    2c80:	aa 81       	ldd	r26, Y+2	; 0x02
    2c82:	b9 81       	ldd	r27, Y+1	; 0x01
    2c84:	ce 0f       	add	r28, r30
    2c86:	d1 1d       	adc	r29, r1
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	ed 01       	movw	r28, r26
    2c94:	08 95       	ret

00002c96 <_exit>:
    2c96:	f8 94       	cli

00002c98 <__stop_program>:
    2c98:	ff cf       	rjmp	.-2      	; 0x2c98 <__stop_program>
